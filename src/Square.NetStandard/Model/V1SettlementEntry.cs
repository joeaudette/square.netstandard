/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// V1SettlementEntry
    /// </summary>
    [DataContract]
    public partial class V1SettlementEntry :  IEquatable<V1SettlementEntry>, IValidatableObject
    {
        /// <summary>
        /// The settlement's current status.
        /// </summary>
        /// <value>The settlement's current status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum ADJUSTMENT for "ADJUSTMENT"
            /// </summary>
            [EnumMember(Value = "ADJUSTMENT")]
            ADJUSTMENT,
            
            /// <summary>
            /// Enum BALANCECHARGE for "BALANCE_CHARGE"
            /// </summary>
            [EnumMember(Value = "BALANCE_CHARGE")]
            BALANCECHARGE,
            
            /// <summary>
            /// Enum CHARGE for "CHARGE"
            /// </summary>
            [EnumMember(Value = "CHARGE")]
            CHARGE,
            
            /// <summary>
            /// Enum FREEPROCESSING for "FREE_PROCESSING"
            /// </summary>
            [EnumMember(Value = "FREE_PROCESSING")]
            FREEPROCESSING,
            
            /// <summary>
            /// Enum HOLDADJUSTMENT for "HOLD_ADJUSTMENT"
            /// </summary>
            [EnumMember(Value = "HOLD_ADJUSTMENT")]
            HOLDADJUSTMENT,
            
            /// <summary>
            /// Enum PAIDSERVICEFEE for "PAID_SERVICE_FEE"
            /// </summary>
            [EnumMember(Value = "PAID_SERVICE_FEE")]
            PAIDSERVICEFEE,
            
            /// <summary>
            /// Enum PAIDSERVICEFEEREFUND for "PAID_SERVICE_FEE_REFUND"
            /// </summary>
            [EnumMember(Value = "PAID_SERVICE_FEE_REFUND")]
            PAIDSERVICEFEEREFUND,
            
            /// <summary>
            /// Enum REDEMPTIONCODE for "REDEMPTION_CODE"
            /// </summary>
            [EnumMember(Value = "REDEMPTION_CODE")]
            REDEMPTIONCODE,
            
            /// <summary>
            /// Enum REFUND for "REFUND"
            /// </summary>
            [EnumMember(Value = "REFUND")]
            REFUND,
            
            /// <summary>
            /// Enum RETURNEDPAYOUT for "RETURNED_PAYOUT"
            /// </summary>
            [EnumMember(Value = "RETURNED_PAYOUT")]
            RETURNEDPAYOUT,
            
            /// <summary>
            /// Enum SQUARECAPITALADVANCE for "SQUARE_CAPITAL_ADVANCE"
            /// </summary>
            [EnumMember(Value = "SQUARE_CAPITAL_ADVANCE")]
            SQUARECAPITALADVANCE,
            
            /// <summary>
            /// Enum SQUARECAPITALPAYMENT for "SQUARE_CAPITAL_PAYMENT"
            /// </summary>
            [EnumMember(Value = "SQUARE_CAPITAL_PAYMENT")]
            SQUARECAPITALPAYMENT,
            
            /// <summary>
            /// Enum SQUARECAPITALREVERSEDPAYMENT for "SQUARE_CAPITAL_REVERSED_PAYMENT"
            /// </summary>
            [EnumMember(Value = "SQUARE_CAPITAL_REVERSED_PAYMENT")]
            SQUARECAPITALREVERSEDPAYMENT,
            
            /// <summary>
            /// Enum SUBSCRIPTIONFEE for "SUBSCRIPTION_FEE"
            /// </summary>
            [EnumMember(Value = "SUBSCRIPTION_FEE")]
            SUBSCRIPTIONFEE,
            
            /// <summary>
            /// Enum SUBSCRIPTIONFEEREFUND for "SUBSCRIPTION_FEE_REFUND"
            /// </summary>
            [EnumMember(Value = "SUBSCRIPTION_FEE_REFUND")]
            SUBSCRIPTIONFEEREFUND,
            
            /// <summary>
            /// Enum INCENTEDPAYMENT for "INCENTED_PAYMENT"
            /// </summary>
            [EnumMember(Value = "INCENTED_PAYMENT")]
            INCENTEDPAYMENT,
            
            /// <summary>
            /// Enum RETURNEDACHENTRY for "RETURNED_ACH_ENTRY"
            /// </summary>
            [EnumMember(Value = "RETURNED_ACH_ENTRY")]
            RETURNEDACHENTRY,
            
            /// <summary>
            /// Enum RETURNEDSQUARE275 for "RETURNED_SQUARE_275"
            /// </summary>
            [EnumMember(Value = "RETURNED_SQUARE_275")]
            RETURNEDSQUARE275,
            
            /// <summary>
            /// Enum SQUARE275 for "SQUARE_275"
            /// </summary>
            [EnumMember(Value = "SQUARE_275")]
            SQUARE275
        }

        /// <summary>
        /// The settlement's current status.
        /// </summary>
        /// <value>The settlement's current status.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1SettlementEntry" /> class.
        /// </summary>
        /// <param name="PaymentId">The settlement&#39;s unique identifier..</param>
        /// <param name="Type">The settlement&#39;s current status..</param>
        /// <param name="AmountMoney">The total amount of money this entry contributes to the total settlement amount..</param>
        /// <param name="FeeMoney">The amount of all Square fees associated with this settlement entry. This value is always negative or zero..</param>
        public V1SettlementEntry(string PaymentId = default(string), TypeEnum? Type = default(TypeEnum?), V1Money AmountMoney = default(V1Money), V1Money FeeMoney = default(V1Money))
        {
            this.PaymentId = PaymentId;
            this.Type = Type;
            this.AmountMoney = AmountMoney;
            this.FeeMoney = FeeMoney;
        }
        
        /// <summary>
        /// The settlement&#39;s unique identifier.
        /// </summary>
        /// <value>The settlement&#39;s unique identifier.</value>
        [DataMember(Name="payment_id", EmitDefaultValue=false)]
        public string PaymentId { get; set; }
        /// <summary>
        /// The total amount of money this entry contributes to the total settlement amount.
        /// </summary>
        /// <value>The total amount of money this entry contributes to the total settlement amount.</value>
        [DataMember(Name="amount_money", EmitDefaultValue=false)]
        public V1Money AmountMoney { get; set; }
        /// <summary>
        /// The amount of all Square fees associated with this settlement entry. This value is always negative or zero.
        /// </summary>
        /// <value>The amount of all Square fees associated with this settlement entry. This value is always negative or zero.</value>
        [DataMember(Name="fee_money", EmitDefaultValue=false)]
        public V1Money FeeMoney { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1SettlementEntry {\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AmountMoney: ").Append(AmountMoney).Append("\n");
            sb.Append("  FeeMoney: ").Append(FeeMoney).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1SettlementEntry);
        }

        /// <summary>
        /// Returns true if V1SettlementEntry instances are equal
        /// </summary>
        /// <param name="other">Instance of V1SettlementEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1SettlementEntry other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PaymentId == other.PaymentId ||
                    this.PaymentId != null &&
                    this.PaymentId.Equals(other.PaymentId)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.AmountMoney == other.AmountMoney ||
                    this.AmountMoney != null &&
                    this.AmountMoney.Equals(other.AmountMoney)
                ) && 
                (
                    this.FeeMoney == other.FeeMoney ||
                    this.FeeMoney != null &&
                    this.FeeMoney.Equals(other.FeeMoney)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PaymentId != null)
                    hash = hash * 59 + this.PaymentId.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.AmountMoney != null)
                    hash = hash * 59 + this.AmountMoney.GetHashCode();
                if (this.FeeMoney != null)
                    hash = hash * 59 + this.FeeMoney.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
