/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// V1BankAccount
    /// </summary>
    [DataContract]
    public partial class V1BankAccount :  IEquatable<V1BankAccount>, IValidatableObject
    {
        /// <summary>
        /// The bank account's type (for example, savings or checking).
        /// </summary>
        /// <value>The bank account's type (for example, savings or checking).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum BUSINESSCHECKING for "BUSINESS_CHECKING"
            /// </summary>
            [EnumMember(Value = "BUSINESS_CHECKING")]
            BUSINESSCHECKING,
            
            /// <summary>
            /// Enum CHECKING for "CHECKING"
            /// </summary>
            [EnumMember(Value = "CHECKING")]
            CHECKING,
            
            /// <summary>
            /// Enum INVESTMENT for "INVESTMENT"
            /// </summary>
            [EnumMember(Value = "INVESTMENT")]
            INVESTMENT,
            
            /// <summary>
            /// Enum LOAN for "LOAN"
            /// </summary>
            [EnumMember(Value = "LOAN")]
            LOAN,
            
            /// <summary>
            /// Enum SAVINGS for "SAVINGS"
            /// </summary>
            [EnumMember(Value = "SAVINGS")]
            SAVINGS,
            
            /// <summary>
            /// Enum OTHER for "OTHER"
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER
        }

        /// <summary>
        /// The bank account's type (for example, savings or checking).
        /// </summary>
        /// <value>The bank account's type (for example, savings or checking).</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1BankAccount" /> class.
        /// </summary>
        /// <param name="Id">The bank account&#39;s Square-issued ID..</param>
        /// <param name="MerchantId">The Square-issued ID of the merchant associated with the bank account..</param>
        /// <param name="BankName">The name of the bank that manages the account..</param>
        /// <param name="Name">The name associated with the bank account..</param>
        /// <param name="RoutingNumber">The bank account&#39;s routing number..</param>
        /// <param name="AccountNumberSuffix">The last few digits of the bank account number..</param>
        /// <param name="CurrencyCode">The currency code of the currency associated with the bank account, in ISO 4217 format. For example, the currency code for US dollars is USD..</param>
        /// <param name="Type">The bank account&#39;s type (for example, savings or checking)..</param>
        public V1BankAccount(string Id = default(string), string MerchantId = default(string), string BankName = default(string), string Name = default(string), string RoutingNumber = default(string), string AccountNumberSuffix = default(string), string CurrencyCode = default(string), TypeEnum? Type = default(TypeEnum?))
        {
            this.Id = Id;
            this.MerchantId = MerchantId;
            this.BankName = BankName;
            this.Name = Name;
            this.RoutingNumber = RoutingNumber;
            this.AccountNumberSuffix = AccountNumberSuffix;
            this.CurrencyCode = CurrencyCode;
            this.Type = Type;
        }
        
        /// <summary>
        /// The bank account&#39;s Square-issued ID.
        /// </summary>
        /// <value>The bank account&#39;s Square-issued ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The Square-issued ID of the merchant associated with the bank account.
        /// </summary>
        /// <value>The Square-issued ID of the merchant associated with the bank account.</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public string MerchantId { get; set; }
        /// <summary>
        /// The name of the bank that manages the account.
        /// </summary>
        /// <value>The name of the bank that manages the account.</value>
        [DataMember(Name="bank_name", EmitDefaultValue=false)]
        public string BankName { get; set; }
        /// <summary>
        /// The name associated with the bank account.
        /// </summary>
        /// <value>The name associated with the bank account.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The bank account&#39;s routing number.
        /// </summary>
        /// <value>The bank account&#39;s routing number.</value>
        [DataMember(Name="routing_number", EmitDefaultValue=false)]
        public string RoutingNumber { get; set; }
        /// <summary>
        /// The last few digits of the bank account number.
        /// </summary>
        /// <value>The last few digits of the bank account number.</value>
        [DataMember(Name="account_number_suffix", EmitDefaultValue=false)]
        public string AccountNumberSuffix { get; set; }
        /// <summary>
        /// The currency code of the currency associated with the bank account, in ISO 4217 format. For example, the currency code for US dollars is USD.
        /// </summary>
        /// <value>The currency code of the currency associated with the bank account, in ISO 4217 format. For example, the currency code for US dollars is USD.</value>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1BankAccount {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RoutingNumber: ").Append(RoutingNumber).Append("\n");
            sb.Append("  AccountNumberSuffix: ").Append(AccountNumberSuffix).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1BankAccount);
        }

        /// <summary>
        /// Returns true if V1BankAccount instances are equal
        /// </summary>
        /// <param name="other">Instance of V1BankAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1BankAccount other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.MerchantId == other.MerchantId ||
                    this.MerchantId != null &&
                    this.MerchantId.Equals(other.MerchantId)
                ) && 
                (
                    this.BankName == other.BankName ||
                    this.BankName != null &&
                    this.BankName.Equals(other.BankName)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.RoutingNumber == other.RoutingNumber ||
                    this.RoutingNumber != null &&
                    this.RoutingNumber.Equals(other.RoutingNumber)
                ) && 
                (
                    this.AccountNumberSuffix == other.AccountNumberSuffix ||
                    this.AccountNumberSuffix != null &&
                    this.AccountNumberSuffix.Equals(other.AccountNumberSuffix)
                ) && 
                (
                    this.CurrencyCode == other.CurrencyCode ||
                    this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(other.CurrencyCode)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.MerchantId != null)
                    hash = hash * 59 + this.MerchantId.GetHashCode();
                if (this.BankName != null)
                    hash = hash * 59 + this.BankName.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.RoutingNumber != null)
                    hash = hash * 59 + this.RoutingNumber.GetHashCode();
                if (this.AccountNumberSuffix != null)
                    hash = hash * 59 + this.AccountNumberSuffix.GetHashCode();
                if (this.CurrencyCode != null)
                    hash = hash * 59 + this.CurrencyCode.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
