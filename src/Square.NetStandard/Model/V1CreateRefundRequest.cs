/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// V1CreateRefundRequest
    /// </summary>
    [DataContract]
    public partial class V1CreateRefundRequest :  IEquatable<V1CreateRefundRequest>, IValidatableObject
    {
        /// <summary>
        /// TThe type of refund (FULL or PARTIAL).
        /// </summary>
        /// <value>TThe type of refund (FULL or PARTIAL).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum FULL for "FULL"
            /// </summary>
            [EnumMember(Value = "FULL")]
            FULL,
            
            /// <summary>
            /// Enum PARTIAL for "PARTIAL"
            /// </summary>
            [EnumMember(Value = "PARTIAL")]
            PARTIAL
        }

        /// <summary>
        /// TThe type of refund (FULL or PARTIAL).
        /// </summary>
        /// <value>TThe type of refund (FULL or PARTIAL).</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1CreateRefundRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1CreateRefundRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1CreateRefundRequest" /> class.
        /// </summary>
        /// <param name="PaymentId">The ID of the payment to refund. If you&#39;re creating a PARTIAL refund for a split tender payment, instead provide the id of the particular tender you want to refund. See Split Tender Payments for details. (required).</param>
        /// <param name="Type">TThe type of refund (FULL or PARTIAL). (required).</param>
        /// <param name="Reason">The reason for the refund. (required).</param>
        /// <param name="RefundedMoney">The amount of money to refund. Required only for PARTIAL refunds..</param>
        /// <param name="RequestIdempotenceKey">An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once..</param>
        public V1CreateRefundRequest(string PaymentId = default(string), TypeEnum? Type = default(TypeEnum?), string Reason = default(string), V1Money RefundedMoney = default(V1Money), string RequestIdempotenceKey = default(string))
        {
            // to ensure "PaymentId" is required (not null)
            if (PaymentId == null)
            {
                throw new InvalidDataException("PaymentId is a required property for V1CreateRefundRequest and cannot be null");
            }
            else
            {
                this.PaymentId = PaymentId;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for V1CreateRefundRequest and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "Reason" is required (not null)
            if (Reason == null)
            {
                throw new InvalidDataException("Reason is a required property for V1CreateRefundRequest and cannot be null");
            }
            else
            {
                this.Reason = Reason;
            }
            this.RefundedMoney = RefundedMoney;
            this.RequestIdempotenceKey = RequestIdempotenceKey;
        }
        
        /// <summary>
        /// The ID of the payment to refund. If you&#39;re creating a PARTIAL refund for a split tender payment, instead provide the id of the particular tender you want to refund. See Split Tender Payments for details.
        /// </summary>
        /// <value>The ID of the payment to refund. If you&#39;re creating a PARTIAL refund for a split tender payment, instead provide the id of the particular tender you want to refund. See Split Tender Payments for details.</value>
        [DataMember(Name="payment_id", EmitDefaultValue=false)]
        public string PaymentId { get; set; }
        /// <summary>
        /// The reason for the refund.
        /// </summary>
        /// <value>The reason for the refund.</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }
        /// <summary>
        /// The amount of money to refund. Required only for PARTIAL refunds.
        /// </summary>
        /// <value>The amount of money to refund. Required only for PARTIAL refunds.</value>
        [DataMember(Name="refunded_money", EmitDefaultValue=false)]
        public V1Money RefundedMoney { get; set; }
        /// <summary>
        /// An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once.
        /// </summary>
        /// <value>An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once.</value>
        [DataMember(Name="request_idempotence_key", EmitDefaultValue=false)]
        public string RequestIdempotenceKey { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1CreateRefundRequest {\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  RefundedMoney: ").Append(RefundedMoney).Append("\n");
            sb.Append("  RequestIdempotenceKey: ").Append(RequestIdempotenceKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1CreateRefundRequest);
        }

        /// <summary>
        /// Returns true if V1CreateRefundRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of V1CreateRefundRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1CreateRefundRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PaymentId == other.PaymentId ||
                    this.PaymentId != null &&
                    this.PaymentId.Equals(other.PaymentId)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Reason == other.Reason ||
                    this.Reason != null &&
                    this.Reason.Equals(other.Reason)
                ) && 
                (
                    this.RefundedMoney == other.RefundedMoney ||
                    this.RefundedMoney != null &&
                    this.RefundedMoney.Equals(other.RefundedMoney)
                ) && 
                (
                    this.RequestIdempotenceKey == other.RequestIdempotenceKey ||
                    this.RequestIdempotenceKey != null &&
                    this.RequestIdempotenceKey.Equals(other.RequestIdempotenceKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PaymentId != null)
                    hash = hash * 59 + this.PaymentId.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Reason != null)
                    hash = hash * 59 + this.Reason.GetHashCode();
                if (this.RefundedMoney != null)
                    hash = hash * 59 + this.RefundedMoney.GetHashCode();
                if (this.RequestIdempotenceKey != null)
                    hash = hash * 59 + this.RequestIdempotenceKey.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
