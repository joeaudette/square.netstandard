/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// V1Fee
    /// </summary>
    [DataContract]
    public partial class V1Fee :  IEquatable<V1Fee>, IValidatableObject
    {
        /// <summary>
        /// Forthcoming
        /// </summary>
        /// <value>Forthcoming</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CalculationPhaseEnum
        {
            
            /// <summary>
            /// Enum FEESUBTOTALPHASE for "FEE_SUBTOTAL_PHASE"
            /// </summary>
            [EnumMember(Value = "FEE_SUBTOTAL_PHASE")]
            FEESUBTOTALPHASE,
            
            /// <summary>
            /// Enum OTHER for "OTHER"
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER,
            
            /// <summary>
            /// Enum FEETOTALPHASE for "FEE_TOTAL_PHASE"
            /// </summary>
            [EnumMember(Value = "FEE_TOTAL_PHASE")]
            FEETOTALPHASE
        }

        /// <summary>
        /// The type of adjustment the fee applies to a payment. Currently, this value is TAX for all fees.
        /// </summary>
        /// <value>The type of adjustment the fee applies to a payment. Currently, this value is TAX for all fees.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AdjustmentTypeEnum
        {
            
            /// <summary>
            /// Enum TAX for "TAX"
            /// </summary>
            [EnumMember(Value = "TAX")]
            TAX
        }

        /// <summary>
        /// Whether the fee is ADDITIVE or INCLUSIVE.
        /// </summary>
        /// <value>Whether the fee is ADDITIVE or INCLUSIVE.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InclusionTypeEnum
        {
            
            /// <summary>
            /// Enum ADDITIVE for "ADDITIVE"
            /// </summary>
            [EnumMember(Value = "ADDITIVE")]
            ADDITIVE,
            
            /// <summary>
            /// Enum INCLUSIVE for "INCLUSIVE"
            /// </summary>
            [EnumMember(Value = "INCLUSIVE")]
            INCLUSIVE
        }

        /// <summary>
        /// In countries with multiple classifications for sales taxes, indicates which classification the fee falls under. Currently relevant only to Canadian merchants.
        /// </summary>
        /// <value>In countries with multiple classifications for sales taxes, indicates which classification the fee falls under. Currently relevant only to Canadian merchants.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum CAGST for "CA_GST"
            /// </summary>
            [EnumMember(Value = "CA_GST")]
            CAGST,
            
            /// <summary>
            /// Enum CAHST for "CA_HST"
            /// </summary>
            [EnumMember(Value = "CA_HST")]
            CAHST,
            
            /// <summary>
            /// Enum CAPST for "CA_PST"
            /// </summary>
            [EnumMember(Value = "CA_PST")]
            CAPST,
            
            /// <summary>
            /// Enum CAQST for "CA_QST"
            /// </summary>
            [EnumMember(Value = "CA_QST")]
            CAQST,
            
            /// <summary>
            /// Enum JPCONSUMPTIONTAX for "JP_CONSUMPTION_TAX"
            /// </summary>
            [EnumMember(Value = "JP_CONSUMPTION_TAX")]
            JPCONSUMPTIONTAX,
            
            /// <summary>
            /// Enum CAPEIPST for "CA_PEI_PST"
            /// </summary>
            [EnumMember(Value = "CA_PEI_PST")]
            CAPEIPST,
            
            /// <summary>
            /// Enum USSALESTAX for "US_SALES_TAX"
            /// </summary>
            [EnumMember(Value = "US_SALES_TAX")]
            USSALESTAX,
            
            /// <summary>
            /// Enum OTHER for "OTHER"
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER
        }

        /// <summary>
        /// Forthcoming
        /// </summary>
        /// <value>Forthcoming</value>
        [DataMember(Name="calculation_phase", EmitDefaultValue=false)]
        public CalculationPhaseEnum? CalculationPhase { get; set; }
        /// <summary>
        /// The type of adjustment the fee applies to a payment. Currently, this value is TAX for all fees.
        /// </summary>
        /// <value>The type of adjustment the fee applies to a payment. Currently, this value is TAX for all fees.</value>
        [DataMember(Name="adjustment_type", EmitDefaultValue=false)]
        public AdjustmentTypeEnum? AdjustmentType { get; set; }
        /// <summary>
        /// Whether the fee is ADDITIVE or INCLUSIVE.
        /// </summary>
        /// <value>Whether the fee is ADDITIVE or INCLUSIVE.</value>
        [DataMember(Name="inclusion_type", EmitDefaultValue=false)]
        public InclusionTypeEnum? InclusionType { get; set; }
        /// <summary>
        /// In countries with multiple classifications for sales taxes, indicates which classification the fee falls under. Currently relevant only to Canadian merchants.
        /// </summary>
        /// <value>In countries with multiple classifications for sales taxes, indicates which classification the fee falls under. Currently relevant only to Canadian merchants.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1Fee" /> class.
        /// </summary>
        /// <param name="Id">The fee&#39;s unique ID..</param>
        /// <param name="Name">The fee&#39;s name..</param>
        /// <param name="Rate">The rate of the fee, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%..</param>
        /// <param name="CalculationPhase">Forthcoming.</param>
        /// <param name="AdjustmentType">The type of adjustment the fee applies to a payment. Currently, this value is TAX for all fees..</param>
        /// <param name="AppliesToCustomAmounts">If true, the fee applies to custom amounts entered into Square Register that are not associated with a particular item..</param>
        /// <param name="Enabled">If true, the fee is applied to all appropriate items. If false, the fee is not applied at all..</param>
        /// <param name="InclusionType">Whether the fee is ADDITIVE or INCLUSIVE..</param>
        /// <param name="Type">In countries with multiple classifications for sales taxes, indicates which classification the fee falls under. Currently relevant only to Canadian merchants..</param>
        public V1Fee(string Id = default(string), string Name = default(string), string Rate = default(string), CalculationPhaseEnum? CalculationPhase = default(CalculationPhaseEnum?), AdjustmentTypeEnum? AdjustmentType = default(AdjustmentTypeEnum?), bool? AppliesToCustomAmounts = default(bool?), bool? Enabled = default(bool?), InclusionTypeEnum? InclusionType = default(InclusionTypeEnum?), TypeEnum? Type = default(TypeEnum?))
        {
            this.Id = Id;
            this.Name = Name;
            this.Rate = Rate;
            this.CalculationPhase = CalculationPhase;
            this.AdjustmentType = AdjustmentType;
            this.AppliesToCustomAmounts = AppliesToCustomAmounts;
            this.Enabled = Enabled;
            this.InclusionType = InclusionType;
            this.Type = Type;
        }
        
        /// <summary>
        /// The fee&#39;s unique ID.
        /// </summary>
        /// <value>The fee&#39;s unique ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The fee&#39;s name.
        /// </summary>
        /// <value>The fee&#39;s name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The rate of the fee, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.
        /// </summary>
        /// <value>The rate of the fee, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.</value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public string Rate { get; set; }
        /// <summary>
        /// If true, the fee applies to custom amounts entered into Square Register that are not associated with a particular item.
        /// </summary>
        /// <value>If true, the fee applies to custom amounts entered into Square Register that are not associated with a particular item.</value>
        [DataMember(Name="applies_to_custom_amounts", EmitDefaultValue=false)]
        public bool? AppliesToCustomAmounts { get; set; }
        /// <summary>
        /// If true, the fee is applied to all appropriate items. If false, the fee is not applied at all.
        /// </summary>
        /// <value>If true, the fee is applied to all appropriate items. If false, the fee is not applied at all.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1Fee {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  CalculationPhase: ").Append(CalculationPhase).Append("\n");
            sb.Append("  AdjustmentType: ").Append(AdjustmentType).Append("\n");
            sb.Append("  AppliesToCustomAmounts: ").Append(AppliesToCustomAmounts).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  InclusionType: ").Append(InclusionType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1Fee);
        }

        /// <summary>
        /// Returns true if V1Fee instances are equal
        /// </summary>
        /// <param name="other">Instance of V1Fee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1Fee other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Rate == other.Rate ||
                    this.Rate != null &&
                    this.Rate.Equals(other.Rate)
                ) && 
                (
                    this.CalculationPhase == other.CalculationPhase ||
                    this.CalculationPhase != null &&
                    this.CalculationPhase.Equals(other.CalculationPhase)
                ) && 
                (
                    this.AdjustmentType == other.AdjustmentType ||
                    this.AdjustmentType != null &&
                    this.AdjustmentType.Equals(other.AdjustmentType)
                ) && 
                (
                    this.AppliesToCustomAmounts == other.AppliesToCustomAmounts ||
                    this.AppliesToCustomAmounts != null &&
                    this.AppliesToCustomAmounts.Equals(other.AppliesToCustomAmounts)
                ) && 
                (
                    this.Enabled == other.Enabled ||
                    this.Enabled != null &&
                    this.Enabled.Equals(other.Enabled)
                ) && 
                (
                    this.InclusionType == other.InclusionType ||
                    this.InclusionType != null &&
                    this.InclusionType.Equals(other.InclusionType)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Rate != null)
                    hash = hash * 59 + this.Rate.GetHashCode();
                if (this.CalculationPhase != null)
                    hash = hash * 59 + this.CalculationPhase.GetHashCode();
                if (this.AdjustmentType != null)
                    hash = hash * 59 + this.AdjustmentType.GetHashCode();
                if (this.AppliesToCustomAmounts != null)
                    hash = hash * 59 + this.AppliesToCustomAmounts.GetHashCode();
                if (this.Enabled != null)
                    hash = hash * 59 + this.Enabled.GetHashCode();
                if (this.InclusionType != null)
                    hash = hash * 59 + this.InclusionType.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
