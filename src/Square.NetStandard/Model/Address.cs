/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Represents a physical address.
    /// </summary>
    [DataContract]
    public partial class Address :  IEquatable<Address>, IValidatableObject
    {
        /// <summary>
        /// The address's country, in ISO 3166-1-alpha-2 format.
        /// </summary>
        /// <value>The address's country, in ISO 3166-1-alpha-2 format.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CountryEnum
        {
            
            /// <summary>
            /// Enum ZZ for "ZZ"
            /// </summary>
            [EnumMember(Value = "ZZ")]
            ZZ,
            
            /// <summary>
            /// Enum AD for "AD"
            /// </summary>
            [EnumMember(Value = "AD")]
            AD,
            
            /// <summary>
            /// Enum AE for "AE"
            /// </summary>
            [EnumMember(Value = "AE")]
            AE,
            
            /// <summary>
            /// Enum AF for "AF"
            /// </summary>
            [EnumMember(Value = "AF")]
            AF,
            
            /// <summary>
            /// Enum AG for "AG"
            /// </summary>
            [EnumMember(Value = "AG")]
            AG,
            
            /// <summary>
            /// Enum AI for "AI"
            /// </summary>
            [EnumMember(Value = "AI")]
            AI,
            
            /// <summary>
            /// Enum AL for "AL"
            /// </summary>
            [EnumMember(Value = "AL")]
            AL,
            
            /// <summary>
            /// Enum AM for "AM"
            /// </summary>
            [EnumMember(Value = "AM")]
            AM,
            
            /// <summary>
            /// Enum AO for "AO"
            /// </summary>
            [EnumMember(Value = "AO")]
            AO,
            
            /// <summary>
            /// Enum AQ for "AQ"
            /// </summary>
            [EnumMember(Value = "AQ")]
            AQ,
            
            /// <summary>
            /// Enum AR for "AR"
            /// </summary>
            [EnumMember(Value = "AR")]
            AR,
            
            /// <summary>
            /// Enum AS for "AS"
            /// </summary>
            [EnumMember(Value = "AS")]
            AS,
            
            /// <summary>
            /// Enum AT for "AT"
            /// </summary>
            [EnumMember(Value = "AT")]
            AT,
            
            /// <summary>
            /// Enum AU for "AU"
            /// </summary>
            [EnumMember(Value = "AU")]
            AU,
            
            /// <summary>
            /// Enum AW for "AW"
            /// </summary>
            [EnumMember(Value = "AW")]
            AW,
            
            /// <summary>
            /// Enum AX for "AX"
            /// </summary>
            [EnumMember(Value = "AX")]
            AX,
            
            /// <summary>
            /// Enum AZ for "AZ"
            /// </summary>
            [EnumMember(Value = "AZ")]
            AZ,
            
            /// <summary>
            /// Enum BA for "BA"
            /// </summary>
            [EnumMember(Value = "BA")]
            BA,
            
            /// <summary>
            /// Enum BB for "BB"
            /// </summary>
            [EnumMember(Value = "BB")]
            BB,
            
            /// <summary>
            /// Enum BD for "BD"
            /// </summary>
            [EnumMember(Value = "BD")]
            BD,
            
            /// <summary>
            /// Enum BE for "BE"
            /// </summary>
            [EnumMember(Value = "BE")]
            BE,
            
            /// <summary>
            /// Enum BF for "BF"
            /// </summary>
            [EnumMember(Value = "BF")]
            BF,
            
            /// <summary>
            /// Enum BG for "BG"
            /// </summary>
            [EnumMember(Value = "BG")]
            BG,
            
            /// <summary>
            /// Enum BH for "BH"
            /// </summary>
            [EnumMember(Value = "BH")]
            BH,
            
            /// <summary>
            /// Enum BI for "BI"
            /// </summary>
            [EnumMember(Value = "BI")]
            BI,
            
            /// <summary>
            /// Enum BJ for "BJ"
            /// </summary>
            [EnumMember(Value = "BJ")]
            BJ,
            
            /// <summary>
            /// Enum BL for "BL"
            /// </summary>
            [EnumMember(Value = "BL")]
            BL,
            
            /// <summary>
            /// Enum BM for "BM"
            /// </summary>
            [EnumMember(Value = "BM")]
            BM,
            
            /// <summary>
            /// Enum BN for "BN"
            /// </summary>
            [EnumMember(Value = "BN")]
            BN,
            
            /// <summary>
            /// Enum BO for "BO"
            /// </summary>
            [EnumMember(Value = "BO")]
            BO,
            
            /// <summary>
            /// Enum BQ for "BQ"
            /// </summary>
            [EnumMember(Value = "BQ")]
            BQ,
            
            /// <summary>
            /// Enum BR for "BR"
            /// </summary>
            [EnumMember(Value = "BR")]
            BR,
            
            /// <summary>
            /// Enum BS for "BS"
            /// </summary>
            [EnumMember(Value = "BS")]
            BS,
            
            /// <summary>
            /// Enum BT for "BT"
            /// </summary>
            [EnumMember(Value = "BT")]
            BT,
            
            /// <summary>
            /// Enum BV for "BV"
            /// </summary>
            [EnumMember(Value = "BV")]
            BV,
            
            /// <summary>
            /// Enum BW for "BW"
            /// </summary>
            [EnumMember(Value = "BW")]
            BW,
            
            /// <summary>
            /// Enum BY for "BY"
            /// </summary>
            [EnumMember(Value = "BY")]
            BY,
            
            /// <summary>
            /// Enum BZ for "BZ"
            /// </summary>
            [EnumMember(Value = "BZ")]
            BZ,
            
            /// <summary>
            /// Enum CA for "CA"
            /// </summary>
            [EnumMember(Value = "CA")]
            CA,
            
            /// <summary>
            /// Enum CC for "CC"
            /// </summary>
            [EnumMember(Value = "CC")]
            CC,
            
            /// <summary>
            /// Enum CD for "CD"
            /// </summary>
            [EnumMember(Value = "CD")]
            CD,
            
            /// <summary>
            /// Enum CF for "CF"
            /// </summary>
            [EnumMember(Value = "CF")]
            CF,
            
            /// <summary>
            /// Enum CG for "CG"
            /// </summary>
            [EnumMember(Value = "CG")]
            CG,
            
            /// <summary>
            /// Enum CH for "CH"
            /// </summary>
            [EnumMember(Value = "CH")]
            CH,
            
            /// <summary>
            /// Enum CI for "CI"
            /// </summary>
            [EnumMember(Value = "CI")]
            CI,
            
            /// <summary>
            /// Enum CK for "CK"
            /// </summary>
            [EnumMember(Value = "CK")]
            CK,
            
            /// <summary>
            /// Enum CL for "CL"
            /// </summary>
            [EnumMember(Value = "CL")]
            CL,
            
            /// <summary>
            /// Enum CM for "CM"
            /// </summary>
            [EnumMember(Value = "CM")]
            CM,
            
            /// <summary>
            /// Enum CN for "CN"
            /// </summary>
            [EnumMember(Value = "CN")]
            CN,
            
            /// <summary>
            /// Enum CO for "CO"
            /// </summary>
            [EnumMember(Value = "CO")]
            CO,
            
            /// <summary>
            /// Enum CR for "CR"
            /// </summary>
            [EnumMember(Value = "CR")]
            CR,
            
            /// <summary>
            /// Enum CU for "CU"
            /// </summary>
            [EnumMember(Value = "CU")]
            CU,
            
            /// <summary>
            /// Enum CV for "CV"
            /// </summary>
            [EnumMember(Value = "CV")]
            CV,
            
            /// <summary>
            /// Enum CW for "CW"
            /// </summary>
            [EnumMember(Value = "CW")]
            CW,
            
            /// <summary>
            /// Enum CX for "CX"
            /// </summary>
            [EnumMember(Value = "CX")]
            CX,
            
            /// <summary>
            /// Enum CY for "CY"
            /// </summary>
            [EnumMember(Value = "CY")]
            CY,
            
            /// <summary>
            /// Enum CZ for "CZ"
            /// </summary>
            [EnumMember(Value = "CZ")]
            CZ,
            
            /// <summary>
            /// Enum DE for "DE"
            /// </summary>
            [EnumMember(Value = "DE")]
            DE,
            
            /// <summary>
            /// Enum DJ for "DJ"
            /// </summary>
            [EnumMember(Value = "DJ")]
            DJ,
            
            /// <summary>
            /// Enum DK for "DK"
            /// </summary>
            [EnumMember(Value = "DK")]
            DK,
            
            /// <summary>
            /// Enum DM for "DM"
            /// </summary>
            [EnumMember(Value = "DM")]
            DM,
            
            /// <summary>
            /// Enum DO for "DO"
            /// </summary>
            [EnumMember(Value = "DO")]
            DO,
            
            /// <summary>
            /// Enum DZ for "DZ"
            /// </summary>
            [EnumMember(Value = "DZ")]
            DZ,
            
            /// <summary>
            /// Enum EC for "EC"
            /// </summary>
            [EnumMember(Value = "EC")]
            EC,
            
            /// <summary>
            /// Enum EE for "EE"
            /// </summary>
            [EnumMember(Value = "EE")]
            EE,
            
            /// <summary>
            /// Enum EG for "EG"
            /// </summary>
            [EnumMember(Value = "EG")]
            EG,
            
            /// <summary>
            /// Enum EH for "EH"
            /// </summary>
            [EnumMember(Value = "EH")]
            EH,
            
            /// <summary>
            /// Enum ER for "ER"
            /// </summary>
            [EnumMember(Value = "ER")]
            ER,
            
            /// <summary>
            /// Enum ES for "ES"
            /// </summary>
            [EnumMember(Value = "ES")]
            ES,
            
            /// <summary>
            /// Enum ET for "ET"
            /// </summary>
            [EnumMember(Value = "ET")]
            ET,
            
            /// <summary>
            /// Enum FI for "FI"
            /// </summary>
            [EnumMember(Value = "FI")]
            FI,
            
            /// <summary>
            /// Enum FJ for "FJ"
            /// </summary>
            [EnumMember(Value = "FJ")]
            FJ,
            
            /// <summary>
            /// Enum FK for "FK"
            /// </summary>
            [EnumMember(Value = "FK")]
            FK,
            
            /// <summary>
            /// Enum FM for "FM"
            /// </summary>
            [EnumMember(Value = "FM")]
            FM,
            
            /// <summary>
            /// Enum FO for "FO"
            /// </summary>
            [EnumMember(Value = "FO")]
            FO,
            
            /// <summary>
            /// Enum FR for "FR"
            /// </summary>
            [EnumMember(Value = "FR")]
            FR,
            
            /// <summary>
            /// Enum GA for "GA"
            /// </summary>
            [EnumMember(Value = "GA")]
            GA,
            
            /// <summary>
            /// Enum GB for "GB"
            /// </summary>
            [EnumMember(Value = "GB")]
            GB,
            
            /// <summary>
            /// Enum GD for "GD"
            /// </summary>
            [EnumMember(Value = "GD")]
            GD,
            
            /// <summary>
            /// Enum GE for "GE"
            /// </summary>
            [EnumMember(Value = "GE")]
            GE,
            
            /// <summary>
            /// Enum GF for "GF"
            /// </summary>
            [EnumMember(Value = "GF")]
            GF,
            
            /// <summary>
            /// Enum GG for "GG"
            /// </summary>
            [EnumMember(Value = "GG")]
            GG,
            
            /// <summary>
            /// Enum GH for "GH"
            /// </summary>
            [EnumMember(Value = "GH")]
            GH,
            
            /// <summary>
            /// Enum GI for "GI"
            /// </summary>
            [EnumMember(Value = "GI")]
            GI,
            
            /// <summary>
            /// Enum GL for "GL"
            /// </summary>
            [EnumMember(Value = "GL")]
            GL,
            
            /// <summary>
            /// Enum GM for "GM"
            /// </summary>
            [EnumMember(Value = "GM")]
            GM,
            
            /// <summary>
            /// Enum GN for "GN"
            /// </summary>
            [EnumMember(Value = "GN")]
            GN,
            
            /// <summary>
            /// Enum GP for "GP"
            /// </summary>
            [EnumMember(Value = "GP")]
            GP,
            
            /// <summary>
            /// Enum GQ for "GQ"
            /// </summary>
            [EnumMember(Value = "GQ")]
            GQ,
            
            /// <summary>
            /// Enum GR for "GR"
            /// </summary>
            [EnumMember(Value = "GR")]
            GR,
            
            /// <summary>
            /// Enum GS for "GS"
            /// </summary>
            [EnumMember(Value = "GS")]
            GS,
            
            /// <summary>
            /// Enum GT for "GT"
            /// </summary>
            [EnumMember(Value = "GT")]
            GT,
            
            /// <summary>
            /// Enum GU for "GU"
            /// </summary>
            [EnumMember(Value = "GU")]
            GU,
            
            /// <summary>
            /// Enum GW for "GW"
            /// </summary>
            [EnumMember(Value = "GW")]
            GW,
            
            /// <summary>
            /// Enum GY for "GY"
            /// </summary>
            [EnumMember(Value = "GY")]
            GY,
            
            /// <summary>
            /// Enum HK for "HK"
            /// </summary>
            [EnumMember(Value = "HK")]
            HK,
            
            /// <summary>
            /// Enum HM for "HM"
            /// </summary>
            [EnumMember(Value = "HM")]
            HM,
            
            /// <summary>
            /// Enum HN for "HN"
            /// </summary>
            [EnumMember(Value = "HN")]
            HN,
            
            /// <summary>
            /// Enum HR for "HR"
            /// </summary>
            [EnumMember(Value = "HR")]
            HR,
            
            /// <summary>
            /// Enum HT for "HT"
            /// </summary>
            [EnumMember(Value = "HT")]
            HT,
            
            /// <summary>
            /// Enum HU for "HU"
            /// </summary>
            [EnumMember(Value = "HU")]
            HU,
            
            /// <summary>
            /// Enum ID for "ID"
            /// </summary>
            [EnumMember(Value = "ID")]
            ID,
            
            /// <summary>
            /// Enum IE for "IE"
            /// </summary>
            [EnumMember(Value = "IE")]
            IE,
            
            /// <summary>
            /// Enum IL for "IL"
            /// </summary>
            [EnumMember(Value = "IL")]
            IL,
            
            /// <summary>
            /// Enum IM for "IM"
            /// </summary>
            [EnumMember(Value = "IM")]
            IM,
            
            /// <summary>
            /// Enum IN for "IN"
            /// </summary>
            [EnumMember(Value = "IN")]
            IN,
            
            /// <summary>
            /// Enum IO for "IO"
            /// </summary>
            [EnumMember(Value = "IO")]
            IO,
            
            /// <summary>
            /// Enum IQ for "IQ"
            /// </summary>
            [EnumMember(Value = "IQ")]
            IQ,
            
            /// <summary>
            /// Enum IR for "IR"
            /// </summary>
            [EnumMember(Value = "IR")]
            IR,
            
            /// <summary>
            /// Enum IS for "IS"
            /// </summary>
            [EnumMember(Value = "IS")]
            IS,
            
            /// <summary>
            /// Enum IT for "IT"
            /// </summary>
            [EnumMember(Value = "IT")]
            IT,
            
            /// <summary>
            /// Enum JE for "JE"
            /// </summary>
            [EnumMember(Value = "JE")]
            JE,
            
            /// <summary>
            /// Enum JM for "JM"
            /// </summary>
            [EnumMember(Value = "JM")]
            JM,
            
            /// <summary>
            /// Enum JO for "JO"
            /// </summary>
            [EnumMember(Value = "JO")]
            JO,
            
            /// <summary>
            /// Enum JP for "JP"
            /// </summary>
            [EnumMember(Value = "JP")]
            JP,
            
            /// <summary>
            /// Enum KE for "KE"
            /// </summary>
            [EnumMember(Value = "KE")]
            KE,
            
            /// <summary>
            /// Enum KG for "KG"
            /// </summary>
            [EnumMember(Value = "KG")]
            KG,
            
            /// <summary>
            /// Enum KH for "KH"
            /// </summary>
            [EnumMember(Value = "KH")]
            KH,
            
            /// <summary>
            /// Enum KI for "KI"
            /// </summary>
            [EnumMember(Value = "KI")]
            KI,
            
            /// <summary>
            /// Enum KM for "KM"
            /// </summary>
            [EnumMember(Value = "KM")]
            KM,
            
            /// <summary>
            /// Enum KN for "KN"
            /// </summary>
            [EnumMember(Value = "KN")]
            KN,
            
            /// <summary>
            /// Enum KP for "KP"
            /// </summary>
            [EnumMember(Value = "KP")]
            KP,
            
            /// <summary>
            /// Enum KR for "KR"
            /// </summary>
            [EnumMember(Value = "KR")]
            KR,
            
            /// <summary>
            /// Enum KW for "KW"
            /// </summary>
            [EnumMember(Value = "KW")]
            KW,
            
            /// <summary>
            /// Enum KY for "KY"
            /// </summary>
            [EnumMember(Value = "KY")]
            KY,
            
            /// <summary>
            /// Enum KZ for "KZ"
            /// </summary>
            [EnumMember(Value = "KZ")]
            KZ,
            
            /// <summary>
            /// Enum LA for "LA"
            /// </summary>
            [EnumMember(Value = "LA")]
            LA,
            
            /// <summary>
            /// Enum LB for "LB"
            /// </summary>
            [EnumMember(Value = "LB")]
            LB,
            
            /// <summary>
            /// Enum LC for "LC"
            /// </summary>
            [EnumMember(Value = "LC")]
            LC,
            
            /// <summary>
            /// Enum LI for "LI"
            /// </summary>
            [EnumMember(Value = "LI")]
            LI,
            
            /// <summary>
            /// Enum LK for "LK"
            /// </summary>
            [EnumMember(Value = "LK")]
            LK,
            
            /// <summary>
            /// Enum LR for "LR"
            /// </summary>
            [EnumMember(Value = "LR")]
            LR,
            
            /// <summary>
            /// Enum LS for "LS"
            /// </summary>
            [EnumMember(Value = "LS")]
            LS,
            
            /// <summary>
            /// Enum LT for "LT"
            /// </summary>
            [EnumMember(Value = "LT")]
            LT,
            
            /// <summary>
            /// Enum LU for "LU"
            /// </summary>
            [EnumMember(Value = "LU")]
            LU,
            
            /// <summary>
            /// Enum LV for "LV"
            /// </summary>
            [EnumMember(Value = "LV")]
            LV,
            
            /// <summary>
            /// Enum LY for "LY"
            /// </summary>
            [EnumMember(Value = "LY")]
            LY,
            
            /// <summary>
            /// Enum MA for "MA"
            /// </summary>
            [EnumMember(Value = "MA")]
            MA,
            
            /// <summary>
            /// Enum MC for "MC"
            /// </summary>
            [EnumMember(Value = "MC")]
            MC,
            
            /// <summary>
            /// Enum MD for "MD"
            /// </summary>
            [EnumMember(Value = "MD")]
            MD,
            
            /// <summary>
            /// Enum ME for "ME"
            /// </summary>
            [EnumMember(Value = "ME")]
            ME,
            
            /// <summary>
            /// Enum MF for "MF"
            /// </summary>
            [EnumMember(Value = "MF")]
            MF,
            
            /// <summary>
            /// Enum MG for "MG"
            /// </summary>
            [EnumMember(Value = "MG")]
            MG,
            
            /// <summary>
            /// Enum MH for "MH"
            /// </summary>
            [EnumMember(Value = "MH")]
            MH,
            
            /// <summary>
            /// Enum MK for "MK"
            /// </summary>
            [EnumMember(Value = "MK")]
            MK,
            
            /// <summary>
            /// Enum ML for "ML"
            /// </summary>
            [EnumMember(Value = "ML")]
            ML,
            
            /// <summary>
            /// Enum MM for "MM"
            /// </summary>
            [EnumMember(Value = "MM")]
            MM,
            
            /// <summary>
            /// Enum MN for "MN"
            /// </summary>
            [EnumMember(Value = "MN")]
            MN,
            
            /// <summary>
            /// Enum MO for "MO"
            /// </summary>
            [EnumMember(Value = "MO")]
            MO,
            
            /// <summary>
            /// Enum MP for "MP"
            /// </summary>
            [EnumMember(Value = "MP")]
            MP,
            
            /// <summary>
            /// Enum MQ for "MQ"
            /// </summary>
            [EnumMember(Value = "MQ")]
            MQ,
            
            /// <summary>
            /// Enum MR for "MR"
            /// </summary>
            [EnumMember(Value = "MR")]
            MR,
            
            /// <summary>
            /// Enum MS for "MS"
            /// </summary>
            [EnumMember(Value = "MS")]
            MS,
            
            /// <summary>
            /// Enum MT for "MT"
            /// </summary>
            [EnumMember(Value = "MT")]
            MT,
            
            /// <summary>
            /// Enum MU for "MU"
            /// </summary>
            [EnumMember(Value = "MU")]
            MU,
            
            /// <summary>
            /// Enum MV for "MV"
            /// </summary>
            [EnumMember(Value = "MV")]
            MV,
            
            /// <summary>
            /// Enum MW for "MW"
            /// </summary>
            [EnumMember(Value = "MW")]
            MW,
            
            /// <summary>
            /// Enum MX for "MX"
            /// </summary>
            [EnumMember(Value = "MX")]
            MX,
            
            /// <summary>
            /// Enum MY for "MY"
            /// </summary>
            [EnumMember(Value = "MY")]
            MY,
            
            /// <summary>
            /// Enum MZ for "MZ"
            /// </summary>
            [EnumMember(Value = "MZ")]
            MZ,
            
            /// <summary>
            /// Enum NA for "NA"
            /// </summary>
            [EnumMember(Value = "NA")]
            NA,
            
            /// <summary>
            /// Enum NC for "NC"
            /// </summary>
            [EnumMember(Value = "NC")]
            NC,
            
            /// <summary>
            /// Enum NE for "NE"
            /// </summary>
            [EnumMember(Value = "NE")]
            NE,
            
            /// <summary>
            /// Enum NF for "NF"
            /// </summary>
            [EnumMember(Value = "NF")]
            NF,
            
            /// <summary>
            /// Enum NG for "NG"
            /// </summary>
            [EnumMember(Value = "NG")]
            NG,
            
            /// <summary>
            /// Enum NI for "NI"
            /// </summary>
            [EnumMember(Value = "NI")]
            NI,
            
            /// <summary>
            /// Enum NL for "NL"
            /// </summary>
            [EnumMember(Value = "NL")]
            NL,
            
            /// <summary>
            /// Enum NO for "NO"
            /// </summary>
            [EnumMember(Value = "NO")]
            NO,
            
            /// <summary>
            /// Enum NP for "NP"
            /// </summary>
            [EnumMember(Value = "NP")]
            NP,
            
            /// <summary>
            /// Enum NR for "NR"
            /// </summary>
            [EnumMember(Value = "NR")]
            NR,
            
            /// <summary>
            /// Enum NU for "NU"
            /// </summary>
            [EnumMember(Value = "NU")]
            NU,
            
            /// <summary>
            /// Enum NZ for "NZ"
            /// </summary>
            [EnumMember(Value = "NZ")]
            NZ,
            
            /// <summary>
            /// Enum OM for "OM"
            /// </summary>
            [EnumMember(Value = "OM")]
            OM,
            
            /// <summary>
            /// Enum PA for "PA"
            /// </summary>
            [EnumMember(Value = "PA")]
            PA,
            
            /// <summary>
            /// Enum PE for "PE"
            /// </summary>
            [EnumMember(Value = "PE")]
            PE,
            
            /// <summary>
            /// Enum PF for "PF"
            /// </summary>
            [EnumMember(Value = "PF")]
            PF,
            
            /// <summary>
            /// Enum PG for "PG"
            /// </summary>
            [EnumMember(Value = "PG")]
            PG,
            
            /// <summary>
            /// Enum PH for "PH"
            /// </summary>
            [EnumMember(Value = "PH")]
            PH,
            
            /// <summary>
            /// Enum PK for "PK"
            /// </summary>
            [EnumMember(Value = "PK")]
            PK,
            
            /// <summary>
            /// Enum PL for "PL"
            /// </summary>
            [EnumMember(Value = "PL")]
            PL,
            
            /// <summary>
            /// Enum PM for "PM"
            /// </summary>
            [EnumMember(Value = "PM")]
            PM,
            
            /// <summary>
            /// Enum PN for "PN"
            /// </summary>
            [EnumMember(Value = "PN")]
            PN,
            
            /// <summary>
            /// Enum PR for "PR"
            /// </summary>
            [EnumMember(Value = "PR")]
            PR,
            
            /// <summary>
            /// Enum PS for "PS"
            /// </summary>
            [EnumMember(Value = "PS")]
            PS,
            
            /// <summary>
            /// Enum PT for "PT"
            /// </summary>
            [EnumMember(Value = "PT")]
            PT,
            
            /// <summary>
            /// Enum PW for "PW"
            /// </summary>
            [EnumMember(Value = "PW")]
            PW,
            
            /// <summary>
            /// Enum PY for "PY"
            /// </summary>
            [EnumMember(Value = "PY")]
            PY,
            
            /// <summary>
            /// Enum QA for "QA"
            /// </summary>
            [EnumMember(Value = "QA")]
            QA,
            
            /// <summary>
            /// Enum RE for "RE"
            /// </summary>
            [EnumMember(Value = "RE")]
            RE,
            
            /// <summary>
            /// Enum RO for "RO"
            /// </summary>
            [EnumMember(Value = "RO")]
            RO,
            
            /// <summary>
            /// Enum RS for "RS"
            /// </summary>
            [EnumMember(Value = "RS")]
            RS,
            
            /// <summary>
            /// Enum RU for "RU"
            /// </summary>
            [EnumMember(Value = "RU")]
            RU,
            
            /// <summary>
            /// Enum RW for "RW"
            /// </summary>
            [EnumMember(Value = "RW")]
            RW,
            
            /// <summary>
            /// Enum SA for "SA"
            /// </summary>
            [EnumMember(Value = "SA")]
            SA,
            
            /// <summary>
            /// Enum SB for "SB"
            /// </summary>
            [EnumMember(Value = "SB")]
            SB,
            
            /// <summary>
            /// Enum SC for "SC"
            /// </summary>
            [EnumMember(Value = "SC")]
            SC,
            
            /// <summary>
            /// Enum SD for "SD"
            /// </summary>
            [EnumMember(Value = "SD")]
            SD,
            
            /// <summary>
            /// Enum SE for "SE"
            /// </summary>
            [EnumMember(Value = "SE")]
            SE,
            
            /// <summary>
            /// Enum SG for "SG"
            /// </summary>
            [EnumMember(Value = "SG")]
            SG,
            
            /// <summary>
            /// Enum SH for "SH"
            /// </summary>
            [EnumMember(Value = "SH")]
            SH,
            
            /// <summary>
            /// Enum SI for "SI"
            /// </summary>
            [EnumMember(Value = "SI")]
            SI,
            
            /// <summary>
            /// Enum SJ for "SJ"
            /// </summary>
            [EnumMember(Value = "SJ")]
            SJ,
            
            /// <summary>
            /// Enum SK for "SK"
            /// </summary>
            [EnumMember(Value = "SK")]
            SK,
            
            /// <summary>
            /// Enum SL for "SL"
            /// </summary>
            [EnumMember(Value = "SL")]
            SL,
            
            /// <summary>
            /// Enum SM for "SM"
            /// </summary>
            [EnumMember(Value = "SM")]
            SM,
            
            /// <summary>
            /// Enum SN for "SN"
            /// </summary>
            [EnumMember(Value = "SN")]
            SN,
            
            /// <summary>
            /// Enum SO for "SO"
            /// </summary>
            [EnumMember(Value = "SO")]
            SO,
            
            /// <summary>
            /// Enum SR for "SR"
            /// </summary>
            [EnumMember(Value = "SR")]
            SR,
            
            /// <summary>
            /// Enum SS for "SS"
            /// </summary>
            [EnumMember(Value = "SS")]
            SS,
            
            /// <summary>
            /// Enum ST for "ST"
            /// </summary>
            [EnumMember(Value = "ST")]
            ST,
            
            /// <summary>
            /// Enum SV for "SV"
            /// </summary>
            [EnumMember(Value = "SV")]
            SV,
            
            /// <summary>
            /// Enum SX for "SX"
            /// </summary>
            [EnumMember(Value = "SX")]
            SX,
            
            /// <summary>
            /// Enum SY for "SY"
            /// </summary>
            [EnumMember(Value = "SY")]
            SY,
            
            /// <summary>
            /// Enum SZ for "SZ"
            /// </summary>
            [EnumMember(Value = "SZ")]
            SZ,
            
            /// <summary>
            /// Enum TC for "TC"
            /// </summary>
            [EnumMember(Value = "TC")]
            TC,
            
            /// <summary>
            /// Enum TD for "TD"
            /// </summary>
            [EnumMember(Value = "TD")]
            TD,
            
            /// <summary>
            /// Enum TF for "TF"
            /// </summary>
            [EnumMember(Value = "TF")]
            TF,
            
            /// <summary>
            /// Enum TG for "TG"
            /// </summary>
            [EnumMember(Value = "TG")]
            TG,
            
            /// <summary>
            /// Enum TH for "TH"
            /// </summary>
            [EnumMember(Value = "TH")]
            TH,
            
            /// <summary>
            /// Enum TJ for "TJ"
            /// </summary>
            [EnumMember(Value = "TJ")]
            TJ,
            
            /// <summary>
            /// Enum TK for "TK"
            /// </summary>
            [EnumMember(Value = "TK")]
            TK,
            
            /// <summary>
            /// Enum TL for "TL"
            /// </summary>
            [EnumMember(Value = "TL")]
            TL,
            
            /// <summary>
            /// Enum TM for "TM"
            /// </summary>
            [EnumMember(Value = "TM")]
            TM,
            
            /// <summary>
            /// Enum TN for "TN"
            /// </summary>
            [EnumMember(Value = "TN")]
            TN,
            
            /// <summary>
            /// Enum TO for "TO"
            /// </summary>
            [EnumMember(Value = "TO")]
            TO,
            
            /// <summary>
            /// Enum TR for "TR"
            /// </summary>
            [EnumMember(Value = "TR")]
            TR,
            
            /// <summary>
            /// Enum TT for "TT"
            /// </summary>
            [EnumMember(Value = "TT")]
            TT,
            
            /// <summary>
            /// Enum TV for "TV"
            /// </summary>
            [EnumMember(Value = "TV")]
            TV,
            
            /// <summary>
            /// Enum TW for "TW"
            /// </summary>
            [EnumMember(Value = "TW")]
            TW,
            
            /// <summary>
            /// Enum TZ for "TZ"
            /// </summary>
            [EnumMember(Value = "TZ")]
            TZ,
            
            /// <summary>
            /// Enum UA for "UA"
            /// </summary>
            [EnumMember(Value = "UA")]
            UA,
            
            /// <summary>
            /// Enum UG for "UG"
            /// </summary>
            [EnumMember(Value = "UG")]
            UG,
            
            /// <summary>
            /// Enum UM for "UM"
            /// </summary>
            [EnumMember(Value = "UM")]
            UM,
            
            /// <summary>
            /// Enum US for "US"
            /// </summary>
            [EnumMember(Value = "US")]
            US,
            
            /// <summary>
            /// Enum UY for "UY"
            /// </summary>
            [EnumMember(Value = "UY")]
            UY,
            
            /// <summary>
            /// Enum UZ for "UZ"
            /// </summary>
            [EnumMember(Value = "UZ")]
            UZ,
            
            /// <summary>
            /// Enum VA for "VA"
            /// </summary>
            [EnumMember(Value = "VA")]
            VA,
            
            /// <summary>
            /// Enum VC for "VC"
            /// </summary>
            [EnumMember(Value = "VC")]
            VC,
            
            /// <summary>
            /// Enum VE for "VE"
            /// </summary>
            [EnumMember(Value = "VE")]
            VE,
            
            /// <summary>
            /// Enum VG for "VG"
            /// </summary>
            [EnumMember(Value = "VG")]
            VG,
            
            /// <summary>
            /// Enum VI for "VI"
            /// </summary>
            [EnumMember(Value = "VI")]
            VI,
            
            /// <summary>
            /// Enum VN for "VN"
            /// </summary>
            [EnumMember(Value = "VN")]
            VN,
            
            /// <summary>
            /// Enum VU for "VU"
            /// </summary>
            [EnumMember(Value = "VU")]
            VU,
            
            /// <summary>
            /// Enum WF for "WF"
            /// </summary>
            [EnumMember(Value = "WF")]
            WF,
            
            /// <summary>
            /// Enum WS for "WS"
            /// </summary>
            [EnumMember(Value = "WS")]
            WS,
            
            /// <summary>
            /// Enum YE for "YE"
            /// </summary>
            [EnumMember(Value = "YE")]
            YE,
            
            /// <summary>
            /// Enum YT for "YT"
            /// </summary>
            [EnumMember(Value = "YT")]
            YT,
            
            /// <summary>
            /// Enum ZA for "ZA"
            /// </summary>
            [EnumMember(Value = "ZA")]
            ZA,
            
            /// <summary>
            /// Enum ZM for "ZM"
            /// </summary>
            [EnumMember(Value = "ZM")]
            ZM,
            
            /// <summary>
            /// Enum ZW for "ZW"
            /// </summary>
            [EnumMember(Value = "ZW")]
            ZW
        }

        /// <summary>
        /// The address's country, in ISO 3166-1-alpha-2 format.
        /// </summary>
        /// <value>The address's country, in ISO 3166-1-alpha-2 format.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public CountryEnum? Country { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="AddressLine1">The first line of the address.  Fields that start with &#x60;address_line&#x60; provide the address&#39;s most specific details, like street number, street name, and building name. They do *not* provide less specific details like city, state/province, or country (these details are provided in other fields)..</param>
        /// <param name="AddressLine2">The second line of the address, if any..</param>
        /// <param name="AddressLine3">The third line of the address, if any..</param>
        /// <param name="Locality">The city or town of the address..</param>
        /// <param name="Sublocality">A civil region within the address&#39;s &#x60;locality&#x60;, if any..</param>
        /// <param name="Sublocality2">A civil region within the address&#39;s &#x60;sublocality&#x60;, if any..</param>
        /// <param name="Sublocality3">A civil region within the address&#39;s &#x60;sublocality_2&#x60;, if any..</param>
        /// <param name="AdministrativeDistrictLevel1">A civil entity within the address&#39;s country. In the US, this is the state..</param>
        /// <param name="AdministrativeDistrictLevel2">A civil entity within the address&#39;s &#x60;administrative_district_level_1&#x60;. In the US, this is the county..</param>
        /// <param name="AdministrativeDistrictLevel3">A civil entity within the address&#39;s &#x60;administrative_district_level_2&#x60;, if any..</param>
        /// <param name="PostalCode">The address&#39;s postal code..</param>
        /// <param name="Country">The address&#39;s country, in ISO 3166-1-alpha-2 format..</param>
        /// <param name="FirstName">Optional first name when it&#39;s representing recipient..</param>
        /// <param name="LastName">Optional last name when it&#39;s representing recipient..</param>
        /// <param name="Organization">Optional organization name when it&#39;s representing recipient..</param>
        public Address(string AddressLine1 = default(string), string AddressLine2 = default(string), string AddressLine3 = default(string), string Locality = default(string), string Sublocality = default(string), string Sublocality2 = default(string), string Sublocality3 = default(string), string AdministrativeDistrictLevel1 = default(string), string AdministrativeDistrictLevel2 = default(string), string AdministrativeDistrictLevel3 = default(string), string PostalCode = default(string), CountryEnum? Country = default(CountryEnum?), string FirstName = default(string), string LastName = default(string), string Organization = default(string))
        {
            this.AddressLine1 = AddressLine1;
            this.AddressLine2 = AddressLine2;
            this.AddressLine3 = AddressLine3;
            this.Locality = Locality;
            this.Sublocality = Sublocality;
            this.Sublocality2 = Sublocality2;
            this.Sublocality3 = Sublocality3;
            this.AdministrativeDistrictLevel1 = AdministrativeDistrictLevel1;
            this.AdministrativeDistrictLevel2 = AdministrativeDistrictLevel2;
            this.AdministrativeDistrictLevel3 = AdministrativeDistrictLevel3;
            this.PostalCode = PostalCode;
            this.Country = Country;
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.Organization = Organization;
        }
        
        /// <summary>
        /// The first line of the address.  Fields that start with &#x60;address_line&#x60; provide the address&#39;s most specific details, like street number, street name, and building name. They do *not* provide less specific details like city, state/province, or country (these details are provided in other fields).
        /// </summary>
        /// <value>The first line of the address.  Fields that start with &#x60;address_line&#x60; provide the address&#39;s most specific details, like street number, street name, and building name. They do *not* provide less specific details like city, state/province, or country (these details are provided in other fields).</value>
        [DataMember(Name="address_line_1", EmitDefaultValue=false)]
        public string AddressLine1 { get; set; }
        /// <summary>
        /// The second line of the address, if any.
        /// </summary>
        /// <value>The second line of the address, if any.</value>
        [DataMember(Name="address_line_2", EmitDefaultValue=false)]
        public string AddressLine2 { get; set; }
        /// <summary>
        /// The third line of the address, if any.
        /// </summary>
        /// <value>The third line of the address, if any.</value>
        [DataMember(Name="address_line_3", EmitDefaultValue=false)]
        public string AddressLine3 { get; set; }
        /// <summary>
        /// The city or town of the address.
        /// </summary>
        /// <value>The city or town of the address.</value>
        [DataMember(Name="locality", EmitDefaultValue=false)]
        public string Locality { get; set; }
        /// <summary>
        /// A civil region within the address&#39;s &#x60;locality&#x60;, if any.
        /// </summary>
        /// <value>A civil region within the address&#39;s &#x60;locality&#x60;, if any.</value>
        [DataMember(Name="sublocality", EmitDefaultValue=false)]
        public string Sublocality { get; set; }
        /// <summary>
        /// A civil region within the address&#39;s &#x60;sublocality&#x60;, if any.
        /// </summary>
        /// <value>A civil region within the address&#39;s &#x60;sublocality&#x60;, if any.</value>
        [DataMember(Name="sublocality_2", EmitDefaultValue=false)]
        public string Sublocality2 { get; set; }
        /// <summary>
        /// A civil region within the address&#39;s &#x60;sublocality_2&#x60;, if any.
        /// </summary>
        /// <value>A civil region within the address&#39;s &#x60;sublocality_2&#x60;, if any.</value>
        [DataMember(Name="sublocality_3", EmitDefaultValue=false)]
        public string Sublocality3 { get; set; }
        /// <summary>
        /// A civil entity within the address&#39;s country. In the US, this is the state.
        /// </summary>
        /// <value>A civil entity within the address&#39;s country. In the US, this is the state.</value>
        [DataMember(Name="administrative_district_level_1", EmitDefaultValue=false)]
        public string AdministrativeDistrictLevel1 { get; set; }
        /// <summary>
        /// A civil entity within the address&#39;s &#x60;administrative_district_level_1&#x60;. In the US, this is the county.
        /// </summary>
        /// <value>A civil entity within the address&#39;s &#x60;administrative_district_level_1&#x60;. In the US, this is the county.</value>
        [DataMember(Name="administrative_district_level_2", EmitDefaultValue=false)]
        public string AdministrativeDistrictLevel2 { get; set; }
        /// <summary>
        /// A civil entity within the address&#39;s &#x60;administrative_district_level_2&#x60;, if any.
        /// </summary>
        /// <value>A civil entity within the address&#39;s &#x60;administrative_district_level_2&#x60;, if any.</value>
        [DataMember(Name="administrative_district_level_3", EmitDefaultValue=false)]
        public string AdministrativeDistrictLevel3 { get; set; }
        /// <summary>
        /// The address&#39;s postal code.
        /// </summary>
        /// <value>The address&#39;s postal code.</value>
        [DataMember(Name="postal_code", EmitDefaultValue=false)]
        public string PostalCode { get; set; }
        /// <summary>
        /// Optional first name when it&#39;s representing recipient.
        /// </summary>
        /// <value>Optional first name when it&#39;s representing recipient.</value>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// Optional last name when it&#39;s representing recipient.
        /// </summary>
        /// <value>Optional last name when it&#39;s representing recipient.</value>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// Optional organization name when it&#39;s representing recipient.
        /// </summary>
        /// <value>Optional organization name when it&#39;s representing recipient.</value>
        [DataMember(Name="organization", EmitDefaultValue=false)]
        public string Organization { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  Sublocality: ").Append(Sublocality).Append("\n");
            sb.Append("  Sublocality2: ").Append(Sublocality2).Append("\n");
            sb.Append("  Sublocality3: ").Append(Sublocality3).Append("\n");
            sb.Append("  AdministrativeDistrictLevel1: ").Append(AdministrativeDistrictLevel1).Append("\n");
            sb.Append("  AdministrativeDistrictLevel2: ").Append(AdministrativeDistrictLevel2).Append("\n");
            sb.Append("  AdministrativeDistrictLevel3: ").Append(AdministrativeDistrictLevel3).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Address);
        }

        /// <summary>
        /// Returns true if Address instances are equal
        /// </summary>
        /// <param name="other">Instance of Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Address other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AddressLine1 == other.AddressLine1 ||
                    this.AddressLine1 != null &&
                    this.AddressLine1.Equals(other.AddressLine1)
                ) && 
                (
                    this.AddressLine2 == other.AddressLine2 ||
                    this.AddressLine2 != null &&
                    this.AddressLine2.Equals(other.AddressLine2)
                ) && 
                (
                    this.AddressLine3 == other.AddressLine3 ||
                    this.AddressLine3 != null &&
                    this.AddressLine3.Equals(other.AddressLine3)
                ) && 
                (
                    this.Locality == other.Locality ||
                    this.Locality != null &&
                    this.Locality.Equals(other.Locality)
                ) && 
                (
                    this.Sublocality == other.Sublocality ||
                    this.Sublocality != null &&
                    this.Sublocality.Equals(other.Sublocality)
                ) && 
                (
                    this.Sublocality2 == other.Sublocality2 ||
                    this.Sublocality2 != null &&
                    this.Sublocality2.Equals(other.Sublocality2)
                ) && 
                (
                    this.Sublocality3 == other.Sublocality3 ||
                    this.Sublocality3 != null &&
                    this.Sublocality3.Equals(other.Sublocality3)
                ) && 
                (
                    this.AdministrativeDistrictLevel1 == other.AdministrativeDistrictLevel1 ||
                    this.AdministrativeDistrictLevel1 != null &&
                    this.AdministrativeDistrictLevel1.Equals(other.AdministrativeDistrictLevel1)
                ) && 
                (
                    this.AdministrativeDistrictLevel2 == other.AdministrativeDistrictLevel2 ||
                    this.AdministrativeDistrictLevel2 != null &&
                    this.AdministrativeDistrictLevel2.Equals(other.AdministrativeDistrictLevel2)
                ) && 
                (
                    this.AdministrativeDistrictLevel3 == other.AdministrativeDistrictLevel3 ||
                    this.AdministrativeDistrictLevel3 != null &&
                    this.AdministrativeDistrictLevel3.Equals(other.AdministrativeDistrictLevel3)
                ) && 
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.Organization == other.Organization ||
                    this.Organization != null &&
                    this.Organization.Equals(other.Organization)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AddressLine1 != null)
                    hash = hash * 59 + this.AddressLine1.GetHashCode();
                if (this.AddressLine2 != null)
                    hash = hash * 59 + this.AddressLine2.GetHashCode();
                if (this.AddressLine3 != null)
                    hash = hash * 59 + this.AddressLine3.GetHashCode();
                if (this.Locality != null)
                    hash = hash * 59 + this.Locality.GetHashCode();
                if (this.Sublocality != null)
                    hash = hash * 59 + this.Sublocality.GetHashCode();
                if (this.Sublocality2 != null)
                    hash = hash * 59 + this.Sublocality2.GetHashCode();
                if (this.Sublocality3 != null)
                    hash = hash * 59 + this.Sublocality3.GetHashCode();
                if (this.AdministrativeDistrictLevel1 != null)
                    hash = hash * 59 + this.AdministrativeDistrictLevel1.GetHashCode();
                if (this.AdministrativeDistrictLevel2 != null)
                    hash = hash * 59 + this.AdministrativeDistrictLevel2.GetHashCode();
                if (this.AdministrativeDistrictLevel3 != null)
                    hash = hash * 59 + this.AdministrativeDistrictLevel3.GetHashCode();
                if (this.PostalCode != null)
                    hash = hash * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.Organization != null)
                    hash = hash * 59 + this.Organization.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
