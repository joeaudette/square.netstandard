/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// V1PaymentItemization
    /// </summary>
    [DataContract]
    public partial class V1PaymentItemization :  IEquatable<V1PaymentItemization>, IValidatableObject
    {
        /// <summary>
        /// The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT
        /// </summary>
        /// <value>The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ItemizationTypeEnum
        {
            
            /// <summary>
            /// Enum ITEM for "ITEM"
            /// </summary>
            [EnumMember(Value = "ITEM")]
            ITEM,
            
            /// <summary>
            /// Enum CUSTOMAMOUNT for "CUSTOM_AMOUNT"
            /// </summary>
            [EnumMember(Value = "CUSTOM_AMOUNT")]
            CUSTOMAMOUNT,
            
            /// <summary>
            /// Enum GIFTCARDACTIVATION for "GIFT_CARD_ACTIVATION"
            /// </summary>
            [EnumMember(Value = "GIFT_CARD_ACTIVATION")]
            GIFTCARDACTIVATION,
            
            /// <summary>
            /// Enum GIFTCARDRELOAD for "GIFT_CARD_RELOAD"
            /// </summary>
            [EnumMember(Value = "GIFT_CARD_RELOAD")]
            GIFTCARDRELOAD,
            
            /// <summary>
            /// Enum GIFTCARDUNKNOWN for "GIFT_CARD_UNKNOWN"
            /// </summary>
            [EnumMember(Value = "GIFT_CARD_UNKNOWN")]
            GIFTCARDUNKNOWN,
            
            /// <summary>
            /// Enum OTHER for "OTHER"
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER
        }

        /// <summary>
        /// The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT
        /// </summary>
        /// <value>The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT</value>
        [DataMember(Name="itemization_type", EmitDefaultValue=false)]
        public ItemizationTypeEnum? ItemizationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1PaymentItemization" /> class.
        /// </summary>
        /// <param name="Name">The item&#39;s name..</param>
        /// <param name="Quantity">The quantity of the item purchased. This can be a decimal value..</param>
        /// <param name="ItemizationType">The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT.</param>
        /// <param name="ItemDetail">Details of the item, including its unique identifier and the identifier of the item variation purchased..</param>
        /// <param name="Notes">Notes entered by the merchant about the item at the time of payment, if any..</param>
        /// <param name="ItemVariationName">The name of the item variation purchased, if any..</param>
        /// <param name="TotalMoney">The total cost of the item, including all taxes and discounts..</param>
        /// <param name="SingleQuantityMoney">The cost of a single unit of this item..</param>
        /// <param name="GrossSalesMoney">The total cost of the itemization and its modifiers, not including taxes or discounts..</param>
        /// <param name="DiscountMoney">The total of all discounts applied to the itemization. This value is always negative or zero..</param>
        /// <param name="NetSalesMoney">The sum of gross_sales_money and discount_money..</param>
        /// <param name="Taxes">All taxes applied to this itemization..</param>
        /// <param name="Discounts">All discounts applied to this itemization..</param>
        /// <param name="Modifiers">All modifier options applied to this itemization..</param>
        public V1PaymentItemization(string Name = default(string), decimal? Quantity = default(decimal?), ItemizationTypeEnum? ItemizationType = default(ItemizationTypeEnum?), V1PaymentItemDetail ItemDetail = default(V1PaymentItemDetail), string Notes = default(string), string ItemVariationName = default(string), V1Money TotalMoney = default(V1Money), V1Money SingleQuantityMoney = default(V1Money), V1Money GrossSalesMoney = default(V1Money), V1Money DiscountMoney = default(V1Money), V1Money NetSalesMoney = default(V1Money), List<V1PaymentTax> Taxes = default(List<V1PaymentTax>), List<V1PaymentDiscount> Discounts = default(List<V1PaymentDiscount>), List<V1PaymentModifier> Modifiers = default(List<V1PaymentModifier>))
        {
            this.Name = Name;
            this.Quantity = Quantity;
            this.ItemizationType = ItemizationType;
            this.ItemDetail = ItemDetail;
            this.Notes = Notes;
            this.ItemVariationName = ItemVariationName;
            this.TotalMoney = TotalMoney;
            this.SingleQuantityMoney = SingleQuantityMoney;
            this.GrossSalesMoney = GrossSalesMoney;
            this.DiscountMoney = DiscountMoney;
            this.NetSalesMoney = NetSalesMoney;
            this.Taxes = Taxes;
            this.Discounts = Discounts;
            this.Modifiers = Modifiers;
        }
        
        /// <summary>
        /// The item&#39;s name.
        /// </summary>
        /// <value>The item&#39;s name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The quantity of the item purchased. This can be a decimal value.
        /// </summary>
        /// <value>The quantity of the item purchased. This can be a decimal value.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal? Quantity { get; set; }
        /// <summary>
        /// Details of the item, including its unique identifier and the identifier of the item variation purchased.
        /// </summary>
        /// <value>Details of the item, including its unique identifier and the identifier of the item variation purchased.</value>
        [DataMember(Name="item_detail", EmitDefaultValue=false)]
        public V1PaymentItemDetail ItemDetail { get; set; }
        /// <summary>
        /// Notes entered by the merchant about the item at the time of payment, if any.
        /// </summary>
        /// <value>Notes entered by the merchant about the item at the time of payment, if any.</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }
        /// <summary>
        /// The name of the item variation purchased, if any.
        /// </summary>
        /// <value>The name of the item variation purchased, if any.</value>
        [DataMember(Name="item_variation_name", EmitDefaultValue=false)]
        public string ItemVariationName { get; set; }
        /// <summary>
        /// The total cost of the item, including all taxes and discounts.
        /// </summary>
        /// <value>The total cost of the item, including all taxes and discounts.</value>
        [DataMember(Name="total_money", EmitDefaultValue=false)]
        public V1Money TotalMoney { get; set; }
        /// <summary>
        /// The cost of a single unit of this item.
        /// </summary>
        /// <value>The cost of a single unit of this item.</value>
        [DataMember(Name="single_quantity_money", EmitDefaultValue=false)]
        public V1Money SingleQuantityMoney { get; set; }
        /// <summary>
        /// The total cost of the itemization and its modifiers, not including taxes or discounts.
        /// </summary>
        /// <value>The total cost of the itemization and its modifiers, not including taxes or discounts.</value>
        [DataMember(Name="gross_sales_money", EmitDefaultValue=false)]
        public V1Money GrossSalesMoney { get; set; }
        /// <summary>
        /// The total of all discounts applied to the itemization. This value is always negative or zero.
        /// </summary>
        /// <value>The total of all discounts applied to the itemization. This value is always negative or zero.</value>
        [DataMember(Name="discount_money", EmitDefaultValue=false)]
        public V1Money DiscountMoney { get; set; }
        /// <summary>
        /// The sum of gross_sales_money and discount_money.
        /// </summary>
        /// <value>The sum of gross_sales_money and discount_money.</value>
        [DataMember(Name="net_sales_money", EmitDefaultValue=false)]
        public V1Money NetSalesMoney { get; set; }
        /// <summary>
        /// All taxes applied to this itemization.
        /// </summary>
        /// <value>All taxes applied to this itemization.</value>
        [DataMember(Name="taxes", EmitDefaultValue=false)]
        public List<V1PaymentTax> Taxes { get; set; }
        /// <summary>
        /// All discounts applied to this itemization.
        /// </summary>
        /// <value>All discounts applied to this itemization.</value>
        [DataMember(Name="discounts", EmitDefaultValue=false)]
        public List<V1PaymentDiscount> Discounts { get; set; }
        /// <summary>
        /// All modifier options applied to this itemization.
        /// </summary>
        /// <value>All modifier options applied to this itemization.</value>
        [DataMember(Name="modifiers", EmitDefaultValue=false)]
        public List<V1PaymentModifier> Modifiers { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1PaymentItemization {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ItemizationType: ").Append(ItemizationType).Append("\n");
            sb.Append("  ItemDetail: ").Append(ItemDetail).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  ItemVariationName: ").Append(ItemVariationName).Append("\n");
            sb.Append("  TotalMoney: ").Append(TotalMoney).Append("\n");
            sb.Append("  SingleQuantityMoney: ").Append(SingleQuantityMoney).Append("\n");
            sb.Append("  GrossSalesMoney: ").Append(GrossSalesMoney).Append("\n");
            sb.Append("  DiscountMoney: ").Append(DiscountMoney).Append("\n");
            sb.Append("  NetSalesMoney: ").Append(NetSalesMoney).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  Discounts: ").Append(Discounts).Append("\n");
            sb.Append("  Modifiers: ").Append(Modifiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1PaymentItemization);
        }

        /// <summary>
        /// Returns true if V1PaymentItemization instances are equal
        /// </summary>
        /// <param name="other">Instance of V1PaymentItemization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1PaymentItemization other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.ItemizationType == other.ItemizationType ||
                    this.ItemizationType != null &&
                    this.ItemizationType.Equals(other.ItemizationType)
                ) && 
                (
                    this.ItemDetail == other.ItemDetail ||
                    this.ItemDetail != null &&
                    this.ItemDetail.Equals(other.ItemDetail)
                ) && 
                (
                    this.Notes == other.Notes ||
                    this.Notes != null &&
                    this.Notes.Equals(other.Notes)
                ) && 
                (
                    this.ItemVariationName == other.ItemVariationName ||
                    this.ItemVariationName != null &&
                    this.ItemVariationName.Equals(other.ItemVariationName)
                ) && 
                (
                    this.TotalMoney == other.TotalMoney ||
                    this.TotalMoney != null &&
                    this.TotalMoney.Equals(other.TotalMoney)
                ) && 
                (
                    this.SingleQuantityMoney == other.SingleQuantityMoney ||
                    this.SingleQuantityMoney != null &&
                    this.SingleQuantityMoney.Equals(other.SingleQuantityMoney)
                ) && 
                (
                    this.GrossSalesMoney == other.GrossSalesMoney ||
                    this.GrossSalesMoney != null &&
                    this.GrossSalesMoney.Equals(other.GrossSalesMoney)
                ) && 
                (
                    this.DiscountMoney == other.DiscountMoney ||
                    this.DiscountMoney != null &&
                    this.DiscountMoney.Equals(other.DiscountMoney)
                ) && 
                (
                    this.NetSalesMoney == other.NetSalesMoney ||
                    this.NetSalesMoney != null &&
                    this.NetSalesMoney.Equals(other.NetSalesMoney)
                ) && 
                (
                    this.Taxes == other.Taxes ||
                    this.Taxes != null &&
                    this.Taxes.SequenceEqual(other.Taxes)
                ) && 
                (
                    this.Discounts == other.Discounts ||
                    this.Discounts != null &&
                    this.Discounts.SequenceEqual(other.Discounts)
                ) && 
                (
                    this.Modifiers == other.Modifiers ||
                    this.Modifiers != null &&
                    this.Modifiers.SequenceEqual(other.Modifiers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.ItemizationType != null)
                    hash = hash * 59 + this.ItemizationType.GetHashCode();
                if (this.ItemDetail != null)
                    hash = hash * 59 + this.ItemDetail.GetHashCode();
                if (this.Notes != null)
                    hash = hash * 59 + this.Notes.GetHashCode();
                if (this.ItemVariationName != null)
                    hash = hash * 59 + this.ItemVariationName.GetHashCode();
                if (this.TotalMoney != null)
                    hash = hash * 59 + this.TotalMoney.GetHashCode();
                if (this.SingleQuantityMoney != null)
                    hash = hash * 59 + this.SingleQuantityMoney.GetHashCode();
                if (this.GrossSalesMoney != null)
                    hash = hash * 59 + this.GrossSalesMoney.GetHashCode();
                if (this.DiscountMoney != null)
                    hash = hash * 59 + this.DiscountMoney.GetHashCode();
                if (this.NetSalesMoney != null)
                    hash = hash * 59 + this.NetSalesMoney.GetHashCode();
                if (this.Taxes != null)
                    hash = hash * 59 + this.Taxes.GetHashCode();
                if (this.Discounts != null)
                    hash = hash * 59 + this.Discounts.GetHashCode();
                if (this.Modifiers != null)
                    hash = hash * 59 + this.Modifiers.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
