/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// V1Settlement
    /// </summary>
    [DataContract]
    public partial class V1Settlement :  IEquatable<V1Settlement>, IValidatableObject
    {
        /// <summary>
        /// The settlement's current status.
        /// </summary>
        /// <value>The settlement's current status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum FAILED for "FAILED"
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED,
            
            /// <summary>
            /// Enum SENT for "SENT"
            /// </summary>
            [EnumMember(Value = "SENT")]
            SENT
        }

        /// <summary>
        /// The settlement's current status.
        /// </summary>
        /// <value>The settlement's current status.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1Settlement" /> class.
        /// </summary>
        /// <param name="Id">The settlement&#39;s unique identifier..</param>
        /// <param name="Status">The settlement&#39;s current status..</param>
        /// <param name="TotalMoney">The amount of money involved in the settlement. A positive amount indicates a deposit, and a negative amount indicates a withdrawal. This amount is never zero..</param>
        /// <param name="InitiatedAt">The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format..</param>
        /// <param name="BankAccountId">The Square-issued unique identifier for the bank account associated with the settlement..</param>
        /// <param name="Entries">The entries included in this settlement..</param>
        public V1Settlement(string Id = default(string), StatusEnum? Status = default(StatusEnum?), V1Money TotalMoney = default(V1Money), string InitiatedAt = default(string), string BankAccountId = default(string), List<V1SettlementEntry> Entries = default(List<V1SettlementEntry>))
        {
            this.Id = Id;
            this.Status = Status;
            this.TotalMoney = TotalMoney;
            this.InitiatedAt = InitiatedAt;
            this.BankAccountId = BankAccountId;
            this.Entries = Entries;
        }
        
        /// <summary>
        /// The settlement&#39;s unique identifier.
        /// </summary>
        /// <value>The settlement&#39;s unique identifier.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The amount of money involved in the settlement. A positive amount indicates a deposit, and a negative amount indicates a withdrawal. This amount is never zero.
        /// </summary>
        /// <value>The amount of money involved in the settlement. A positive amount indicates a deposit, and a negative amount indicates a withdrawal. This amount is never zero.</value>
        [DataMember(Name="total_money", EmitDefaultValue=false)]
        public V1Money TotalMoney { get; set; }
        /// <summary>
        /// The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format.
        /// </summary>
        /// <value>The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format.</value>
        [DataMember(Name="initiated_at", EmitDefaultValue=false)]
        public string InitiatedAt { get; set; }
        /// <summary>
        /// The Square-issued unique identifier for the bank account associated with the settlement.
        /// </summary>
        /// <value>The Square-issued unique identifier for the bank account associated with the settlement.</value>
        [DataMember(Name="bank_account_id", EmitDefaultValue=false)]
        public string BankAccountId { get; set; }
        /// <summary>
        /// The entries included in this settlement.
        /// </summary>
        /// <value>The entries included in this settlement.</value>
        [DataMember(Name="entries", EmitDefaultValue=false)]
        public List<V1SettlementEntry> Entries { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1Settlement {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TotalMoney: ").Append(TotalMoney).Append("\n");
            sb.Append("  InitiatedAt: ").Append(InitiatedAt).Append("\n");
            sb.Append("  BankAccountId: ").Append(BankAccountId).Append("\n");
            sb.Append("  Entries: ").Append(Entries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1Settlement);
        }

        /// <summary>
        /// Returns true if V1Settlement instances are equal
        /// </summary>
        /// <param name="other">Instance of V1Settlement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1Settlement other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.TotalMoney == other.TotalMoney ||
                    this.TotalMoney != null &&
                    this.TotalMoney.Equals(other.TotalMoney)
                ) && 
                (
                    this.InitiatedAt == other.InitiatedAt ||
                    this.InitiatedAt != null &&
                    this.InitiatedAt.Equals(other.InitiatedAt)
                ) && 
                (
                    this.BankAccountId == other.BankAccountId ||
                    this.BankAccountId != null &&
                    this.BankAccountId.Equals(other.BankAccountId)
                ) && 
                (
                    this.Entries == other.Entries ||
                    this.Entries != null &&
                    this.Entries.SequenceEqual(other.Entries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.TotalMoney != null)
                    hash = hash * 59 + this.TotalMoney.GetHashCode();
                if (this.InitiatedAt != null)
                    hash = hash * 59 + this.InitiatedAt.GetHashCode();
                if (this.BankAccountId != null)
                    hash = hash * 59 + this.BankAccountId.GetHashCode();
                if (this.Entries != null)
                    hash = hash * 59 + this.Entries.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
