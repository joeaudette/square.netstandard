/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CatalogQueryRange :  IEquatable<CatalogQueryRange>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogQueryRange" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogQueryRange() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogQueryRange" /> class.
        /// </summary>
        /// <param name="AttributeName">The name of the attribute to be searched. (required).</param>
        /// <param name="AttributeMinValue">The desired minimum value for the search attribute (inclusive)..</param>
        /// <param name="AttributeMaxValue">The desired maximum value for the search attribute (inclusive)..</param>
        public CatalogQueryRange(string AttributeName = default(string), long? AttributeMinValue = default(long?), long? AttributeMaxValue = default(long?))
        {
            // to ensure "AttributeName" is required (not null)
            if (AttributeName == null)
            {
                throw new InvalidDataException("AttributeName is a required property for CatalogQueryRange and cannot be null");
            }
            else
            {
                this.AttributeName = AttributeName;
            }
            this.AttributeMinValue = AttributeMinValue;
            this.AttributeMaxValue = AttributeMaxValue;
        }
        
        /// <summary>
        /// The name of the attribute to be searched.
        /// </summary>
        /// <value>The name of the attribute to be searched.</value>
        [DataMember(Name="attribute_name", EmitDefaultValue=false)]
        public string AttributeName { get; set; }
        /// <summary>
        /// The desired minimum value for the search attribute (inclusive).
        /// </summary>
        /// <value>The desired minimum value for the search attribute (inclusive).</value>
        [DataMember(Name="attribute_min_value", EmitDefaultValue=false)]
        public long? AttributeMinValue { get; set; }
        /// <summary>
        /// The desired maximum value for the search attribute (inclusive).
        /// </summary>
        /// <value>The desired maximum value for the search attribute (inclusive).</value>
        [DataMember(Name="attribute_max_value", EmitDefaultValue=false)]
        public long? AttributeMaxValue { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogQueryRange {\n");
            sb.Append("  AttributeName: ").Append(AttributeName).Append("\n");
            sb.Append("  AttributeMinValue: ").Append(AttributeMinValue).Append("\n");
            sb.Append("  AttributeMaxValue: ").Append(AttributeMaxValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CatalogQueryRange);
        }

        /// <summary>
        /// Returns true if CatalogQueryRange instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogQueryRange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogQueryRange other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AttributeName == other.AttributeName ||
                    this.AttributeName != null &&
                    this.AttributeName.Equals(other.AttributeName)
                ) && 
                (
                    this.AttributeMinValue == other.AttributeMinValue ||
                    this.AttributeMinValue != null &&
                    this.AttributeMinValue.Equals(other.AttributeMinValue)
                ) && 
                (
                    this.AttributeMaxValue == other.AttributeMaxValue ||
                    this.AttributeMaxValue != null &&
                    this.AttributeMaxValue.Equals(other.AttributeMaxValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AttributeName != null)
                    hash = hash * 59 + this.AttributeName.GetHashCode();
                if (this.AttributeMinValue != null)
                    hash = hash * 59 + this.AttributeMinValue.GetHashCode();
                if (this.AttributeMaxValue != null)
                    hash = hash * 59 + this.AttributeMaxValue.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // AttributeName (string) minLength
            if(this.AttributeName != null && this.AttributeName.Length < 1)
            {
                yield return new ValidationResult("Invalid value for AttributeName, length must be greater than 1.", new [] { "AttributeName" });
            }

            yield break;
        }
    }

}
