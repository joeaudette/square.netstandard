/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Represents additional details of a tender with &#x60;type&#x60; &#x60;CARD&#x60; or &#x60;SQUARE_GIFT_CARD&#x60;
    /// </summary>
    [DataContract]
    public partial class TenderCardDetails :  IEquatable<TenderCardDetails>, IValidatableObject
    {
        /// <summary>
        /// The credit card payment's current state (such as `AUTHORIZED` or `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values.
        /// </summary>
        /// <value>The credit card payment's current state (such as `AUTHORIZED` or `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum AUTHORIZED for "AUTHORIZED"
            /// </summary>
            [EnumMember(Value = "AUTHORIZED")]
            AUTHORIZED,
            
            /// <summary>
            /// Enum CAPTURED for "CAPTURED"
            /// </summary>
            [EnumMember(Value = "CAPTURED")]
            CAPTURED,
            
            /// <summary>
            /// Enum VOIDED for "VOIDED"
            /// </summary>
            [EnumMember(Value = "VOIDED")]
            VOIDED,
            
            /// <summary>
            /// Enum FAILED for "FAILED"
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED
        }

        /// <summary>
        /// The method used to enter the card's details for the transaction.
        /// </summary>
        /// <value>The method used to enter the card's details for the transaction.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EntryMethodEnum
        {
            
            /// <summary>
            /// Enum SWIPED for "SWIPED"
            /// </summary>
            [EnumMember(Value = "SWIPED")]
            SWIPED,
            
            /// <summary>
            /// Enum KEYED for "KEYED"
            /// </summary>
            [EnumMember(Value = "KEYED")]
            KEYED,
            
            /// <summary>
            /// Enum EMV for "EMV"
            /// </summary>
            [EnumMember(Value = "EMV")]
            EMV,
            
            /// <summary>
            /// Enum ONFILE for "ON_FILE"
            /// </summary>
            [EnumMember(Value = "ON_FILE")]
            ONFILE,
            
            /// <summary>
            /// Enum CONTACTLESS for "CONTACTLESS"
            /// </summary>
            [EnumMember(Value = "CONTACTLESS")]
            CONTACTLESS
        }

        /// <summary>
        /// The credit card payment's current state (such as `AUTHORIZED` or `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values.
        /// </summary>
        /// <value>The credit card payment's current state (such as `AUTHORIZED` or `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// The method used to enter the card's details for the transaction.
        /// </summary>
        /// <value>The method used to enter the card's details for the transaction.</value>
        [DataMember(Name="entry_method", EmitDefaultValue=false)]
        public EntryMethodEnum? EntryMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TenderCardDetails" /> class.
        /// </summary>
        /// <param name="Status">The credit card payment&#39;s current state (such as &#x60;AUTHORIZED&#x60; or &#x60;CAPTURED&#x60;). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values..</param>
        /// <param name="Card">The credit card&#39;s non-confidential details..</param>
        /// <param name="EntryMethod">The method used to enter the card&#39;s details for the transaction..</param>
        public TenderCardDetails(StatusEnum? Status = default(StatusEnum?), Card Card = default(Card), EntryMethodEnum? EntryMethod = default(EntryMethodEnum?))
        {
            this.Status = Status;
            this.Card = Card;
            this.EntryMethod = EntryMethod;
        }
        
        /// <summary>
        /// The credit card&#39;s non-confidential details.
        /// </summary>
        /// <value>The credit card&#39;s non-confidential details.</value>
        [DataMember(Name="card", EmitDefaultValue=false)]
        public Card Card { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TenderCardDetails {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  EntryMethod: ").Append(EntryMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TenderCardDetails);
        }

        /// <summary>
        /// Returns true if TenderCardDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of TenderCardDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TenderCardDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Card == other.Card ||
                    this.Card != null &&
                    this.Card.Equals(other.Card)
                ) && 
                (
                    this.EntryMethod == other.EntryMethod ||
                    this.EntryMethod != null &&
                    this.EntryMethod.Equals(other.EntryMethod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Card != null)
                    hash = hash * 59 + this.Card.GetHashCode();
                if (this.EntryMethod != null)
                    hash = hash * 59 + this.EntryMethod.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
