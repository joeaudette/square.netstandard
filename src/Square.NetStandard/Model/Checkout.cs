/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Square Checkout lets merchants accept online payments for supported payment types using a checkout workflow hosted on squareup.com.
    /// </summary>
    [DataContract]
    public partial class Checkout :  IEquatable<Checkout>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Checkout" /> class.
        /// </summary>
        /// <param name="Id">ID generated by Square Checkout when a new checkout is requested..</param>
        /// <param name="CheckoutPageUrl">The URL that the buyer&#39;s browser should be redirected to after the checkout is completed..</param>
        /// <param name="AskForShippingAddress">If &#x60;true&#x60;, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: &#x60;false&#x60;..</param>
        /// <param name="MerchantSupportEmail">The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant&#39;s Square account.  Default: none; only exists if explicitly set..</param>
        /// <param name="PrePopulateBuyerEmail">If provided, the buyer&#39;s email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set..</param>
        /// <param name="PrePopulateShippingAddress">If provided, the buyer&#39;s shipping info is pre-populated on the checkout page as editable text fields.  Default: none; only exists if explicitly set..</param>
        /// <param name="RedirectUrl">The URL to redirect to after checkout is completed with &#x60;checkoutId&#x60;, Square&#39;s &#x60;orderId&#x60;, &#x60;transactionId&#x60;, and &#x60;referenceId&#x60; appended as URL parameters. For example, if the provided redirect_url is &#x60;http://www.example.com/order-complete&#x60;, a successful transaction redirects the customer to:  &#x60;http://www.example.com/order-complete?checkoutId&#x3D;xxxxxx&amp;orderId&#x3D;xxxxxx&amp;referenceId&#x3D;xxxxxx&amp;transactionId&#x3D;xxxxxx&#x60;  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow..</param>
        /// <param name="Order">Order to be checked out..</param>
        /// <param name="CreatedAt">The time when the checkout was created, in RFC 3339 format..</param>
        /// <param name="AdditionalRecipients">Additional recipients (other than the merchant) receiving a portion of this checkout. For example, fees assessed on the purchase by a third party integration..</param>
        public Checkout(string Id = default(string), string CheckoutPageUrl = default(string), bool? AskForShippingAddress = default(bool?), string MerchantSupportEmail = default(string), string PrePopulateBuyerEmail = default(string), Address PrePopulateShippingAddress = default(Address), string RedirectUrl = default(string), Order Order = default(Order), string CreatedAt = default(string), List<AdditionalRecipient> AdditionalRecipients = default(List<AdditionalRecipient>))
        {
            this.Id = Id;
            this.CheckoutPageUrl = CheckoutPageUrl;
            this.AskForShippingAddress = AskForShippingAddress;
            this.MerchantSupportEmail = MerchantSupportEmail;
            this.PrePopulateBuyerEmail = PrePopulateBuyerEmail;
            this.PrePopulateShippingAddress = PrePopulateShippingAddress;
            this.RedirectUrl = RedirectUrl;
            this.Order = Order;
            this.CreatedAt = CreatedAt;
            this.AdditionalRecipients = AdditionalRecipients;
        }
        
        /// <summary>
        /// ID generated by Square Checkout when a new checkout is requested.
        /// </summary>
        /// <value>ID generated by Square Checkout when a new checkout is requested.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The URL that the buyer&#39;s browser should be redirected to after the checkout is completed.
        /// </summary>
        /// <value>The URL that the buyer&#39;s browser should be redirected to after the checkout is completed.</value>
        [DataMember(Name="checkout_page_url", EmitDefaultValue=false)]
        public string CheckoutPageUrl { get; set; }
        /// <summary>
        /// If &#x60;true&#x60;, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: &#x60;false&#x60;.
        /// </summary>
        /// <value>If &#x60;true&#x60;, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: &#x60;false&#x60;.</value>
        [DataMember(Name="ask_for_shipping_address", EmitDefaultValue=false)]
        public bool? AskForShippingAddress { get; set; }
        /// <summary>
        /// The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant&#39;s Square account.  Default: none; only exists if explicitly set.
        /// </summary>
        /// <value>The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant&#39;s Square account.  Default: none; only exists if explicitly set.</value>
        [DataMember(Name="merchant_support_email", EmitDefaultValue=false)]
        public string MerchantSupportEmail { get; set; }
        /// <summary>
        /// If provided, the buyer&#39;s email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.
        /// </summary>
        /// <value>If provided, the buyer&#39;s email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.</value>
        [DataMember(Name="pre_populate_buyer_email", EmitDefaultValue=false)]
        public string PrePopulateBuyerEmail { get; set; }
        /// <summary>
        /// If provided, the buyer&#39;s shipping info is pre-populated on the checkout page as editable text fields.  Default: none; only exists if explicitly set.
        /// </summary>
        /// <value>If provided, the buyer&#39;s shipping info is pre-populated on the checkout page as editable text fields.  Default: none; only exists if explicitly set.</value>
        [DataMember(Name="pre_populate_shipping_address", EmitDefaultValue=false)]
        public Address PrePopulateShippingAddress { get; set; }
        /// <summary>
        /// The URL to redirect to after checkout is completed with &#x60;checkoutId&#x60;, Square&#39;s &#x60;orderId&#x60;, &#x60;transactionId&#x60;, and &#x60;referenceId&#x60; appended as URL parameters. For example, if the provided redirect_url is &#x60;http://www.example.com/order-complete&#x60;, a successful transaction redirects the customer to:  &#x60;http://www.example.com/order-complete?checkoutId&#x3D;xxxxxx&amp;orderId&#x3D;xxxxxx&amp;referenceId&#x3D;xxxxxx&amp;transactionId&#x3D;xxxxxx&#x60;  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.
        /// </summary>
        /// <value>The URL to redirect to after checkout is completed with &#x60;checkoutId&#x60;, Square&#39;s &#x60;orderId&#x60;, &#x60;transactionId&#x60;, and &#x60;referenceId&#x60; appended as URL parameters. For example, if the provided redirect_url is &#x60;http://www.example.com/order-complete&#x60;, a successful transaction redirects the customer to:  &#x60;http://www.example.com/order-complete?checkoutId&#x3D;xxxxxx&amp;orderId&#x3D;xxxxxx&amp;referenceId&#x3D;xxxxxx&amp;transactionId&#x3D;xxxxxx&#x60;  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.</value>
        [DataMember(Name="redirect_url", EmitDefaultValue=false)]
        public string RedirectUrl { get; set; }
        /// <summary>
        /// Order to be checked out.
        /// </summary>
        /// <value>Order to be checked out.</value>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public Order Order { get; set; }
        /// <summary>
        /// The time when the checkout was created, in RFC 3339 format.
        /// </summary>
        /// <value>The time when the checkout was created, in RFC 3339 format.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// Additional recipients (other than the merchant) receiving a portion of this checkout. For example, fees assessed on the purchase by a third party integration.
        /// </summary>
        /// <value>Additional recipients (other than the merchant) receiving a portion of this checkout. For example, fees assessed on the purchase by a third party integration.</value>
        [DataMember(Name="additional_recipients", EmitDefaultValue=false)]
        public List<AdditionalRecipient> AdditionalRecipients { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Checkout {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CheckoutPageUrl: ").Append(CheckoutPageUrl).Append("\n");
            sb.Append("  AskForShippingAddress: ").Append(AskForShippingAddress).Append("\n");
            sb.Append("  MerchantSupportEmail: ").Append(MerchantSupportEmail).Append("\n");
            sb.Append("  PrePopulateBuyerEmail: ").Append(PrePopulateBuyerEmail).Append("\n");
            sb.Append("  PrePopulateShippingAddress: ").Append(PrePopulateShippingAddress).Append("\n");
            sb.Append("  RedirectUrl: ").Append(RedirectUrl).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  AdditionalRecipients: ").Append(AdditionalRecipients).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Checkout);
        }

        /// <summary>
        /// Returns true if Checkout instances are equal
        /// </summary>
        /// <param name="other">Instance of Checkout to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Checkout other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.CheckoutPageUrl == other.CheckoutPageUrl ||
                    this.CheckoutPageUrl != null &&
                    this.CheckoutPageUrl.Equals(other.CheckoutPageUrl)
                ) && 
                (
                    this.AskForShippingAddress == other.AskForShippingAddress ||
                    this.AskForShippingAddress != null &&
                    this.AskForShippingAddress.Equals(other.AskForShippingAddress)
                ) && 
                (
                    this.MerchantSupportEmail == other.MerchantSupportEmail ||
                    this.MerchantSupportEmail != null &&
                    this.MerchantSupportEmail.Equals(other.MerchantSupportEmail)
                ) && 
                (
                    this.PrePopulateBuyerEmail == other.PrePopulateBuyerEmail ||
                    this.PrePopulateBuyerEmail != null &&
                    this.PrePopulateBuyerEmail.Equals(other.PrePopulateBuyerEmail)
                ) && 
                (
                    this.PrePopulateShippingAddress == other.PrePopulateShippingAddress ||
                    this.PrePopulateShippingAddress != null &&
                    this.PrePopulateShippingAddress.Equals(other.PrePopulateShippingAddress)
                ) && 
                (
                    this.RedirectUrl == other.RedirectUrl ||
                    this.RedirectUrl != null &&
                    this.RedirectUrl.Equals(other.RedirectUrl)
                ) && 
                (
                    this.Order == other.Order ||
                    this.Order != null &&
                    this.Order.Equals(other.Order)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.AdditionalRecipients == other.AdditionalRecipients ||
                    this.AdditionalRecipients != null &&
                    this.AdditionalRecipients.SequenceEqual(other.AdditionalRecipients)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.CheckoutPageUrl != null)
                    hash = hash * 59 + this.CheckoutPageUrl.GetHashCode();
                if (this.AskForShippingAddress != null)
                    hash = hash * 59 + this.AskForShippingAddress.GetHashCode();
                if (this.MerchantSupportEmail != null)
                    hash = hash * 59 + this.MerchantSupportEmail.GetHashCode();
                if (this.PrePopulateBuyerEmail != null)
                    hash = hash * 59 + this.PrePopulateBuyerEmail.GetHashCode();
                if (this.PrePopulateShippingAddress != null)
                    hash = hash * 59 + this.PrePopulateShippingAddress.GetHashCode();
                if (this.RedirectUrl != null)
                    hash = hash * 59 + this.RedirectUrl.GetHashCode();
                if (this.Order != null)
                    hash = hash * 59 + this.Order.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.AdditionalRecipients != null)
                    hash = hash * 59 + this.AdditionalRecipients.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
