/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// V1TimecardEvent
    /// </summary>
    [DataContract]
    public partial class V1TimecardEvent :  IEquatable<V1TimecardEvent>, IValidatableObject
    {
        /// <summary>
        /// The ID of the timecard to list events for.
        /// </summary>
        /// <value>The ID of the timecard to list events for.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventTypeEnum
        {
            
            /// <summary>
            /// Enum APICREATE for "API_CREATE"
            /// </summary>
            [EnumMember(Value = "API_CREATE")]
            APICREATE,
            
            /// <summary>
            /// Enum APIEDIT for "API_EDIT"
            /// </summary>
            [EnumMember(Value = "API_EDIT")]
            APIEDIT,
            
            /// <summary>
            /// Enum APIDELETE for "API_DELETE"
            /// </summary>
            [EnumMember(Value = "API_DELETE")]
            APIDELETE,
            
            /// <summary>
            /// Enum REGISTERCLOCKIN for "REGISTER_CLOCKIN"
            /// </summary>
            [EnumMember(Value = "REGISTER_CLOCKIN")]
            REGISTERCLOCKIN,
            
            /// <summary>
            /// Enum REGISTERCLOCKOUT for "REGISTER_CLOCKOUT"
            /// </summary>
            [EnumMember(Value = "REGISTER_CLOCKOUT")]
            REGISTERCLOCKOUT,
            
            /// <summary>
            /// Enum DASHBOARDSUPERVISORCLOSE for "DASHBOARD_SUPERVISOR_CLOSE"
            /// </summary>
            [EnumMember(Value = "DASHBOARD_SUPERVISOR_CLOSE")]
            DASHBOARDSUPERVISORCLOSE,
            
            /// <summary>
            /// Enum DASHBOARDEDIT for "DASHBOARD_EDIT"
            /// </summary>
            [EnumMember(Value = "DASHBOARD_EDIT")]
            DASHBOARDEDIT,
            
            /// <summary>
            /// Enum DASHBOARDDELETE for "DASHBOARD_DELETE"
            /// </summary>
            [EnumMember(Value = "DASHBOARD_DELETE")]
            DASHBOARDDELETE
        }

        /// <summary>
        /// The ID of the timecard to list events for.
        /// </summary>
        /// <value>The ID of the timecard to list events for.</value>
        [DataMember(Name="event_type", EmitDefaultValue=false)]
        public EventTypeEnum? EventType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1TimecardEvent" /> class.
        /// </summary>
        /// <param name="Id">The event&#39;s unique ID..</param>
        /// <param name="EventType">The ID of the timecard to list events for..</param>
        /// <param name="ClockinTime">The time the employee clocked in, in ISO 8601 format..</param>
        /// <param name="ClockoutTime">The time the employee clocked out, in ISO 8601 format..</param>
        /// <param name="CreatedAt">The time when the event was created, in ISO 8601 format..</param>
        public V1TimecardEvent(string Id = default(string), EventTypeEnum? EventType = default(EventTypeEnum?), string ClockinTime = default(string), string ClockoutTime = default(string), string CreatedAt = default(string))
        {
            this.Id = Id;
            this.EventType = EventType;
            this.ClockinTime = ClockinTime;
            this.ClockoutTime = ClockoutTime;
            this.CreatedAt = CreatedAt;
        }
        
        /// <summary>
        /// The event&#39;s unique ID.
        /// </summary>
        /// <value>The event&#39;s unique ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The time the employee clocked in, in ISO 8601 format.
        /// </summary>
        /// <value>The time the employee clocked in, in ISO 8601 format.</value>
        [DataMember(Name="clockin_time", EmitDefaultValue=false)]
        public string ClockinTime { get; set; }
        /// <summary>
        /// The time the employee clocked out, in ISO 8601 format.
        /// </summary>
        /// <value>The time the employee clocked out, in ISO 8601 format.</value>
        [DataMember(Name="clockout_time", EmitDefaultValue=false)]
        public string ClockoutTime { get; set; }
        /// <summary>
        /// The time when the event was created, in ISO 8601 format.
        /// </summary>
        /// <value>The time when the event was created, in ISO 8601 format.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1TimecardEvent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  ClockinTime: ").Append(ClockinTime).Append("\n");
            sb.Append("  ClockoutTime: ").Append(ClockoutTime).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1TimecardEvent);
        }

        /// <summary>
        /// Returns true if V1TimecardEvent instances are equal
        /// </summary>
        /// <param name="other">Instance of V1TimecardEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1TimecardEvent other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.EventType == other.EventType ||
                    this.EventType != null &&
                    this.EventType.Equals(other.EventType)
                ) && 
                (
                    this.ClockinTime == other.ClockinTime ||
                    this.ClockinTime != null &&
                    this.ClockinTime.Equals(other.ClockinTime)
                ) && 
                (
                    this.ClockoutTime == other.ClockoutTime ||
                    this.ClockoutTime != null &&
                    this.ClockoutTime.Equals(other.ClockoutTime)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.EventType != null)
                    hash = hash * 59 + this.EventType.GetHashCode();
                if (this.ClockinTime != null)
                    hash = hash * 59 + this.ClockinTime.GetHashCode();
                if (this.ClockoutTime != null)
                    hash = hash * 59 + this.ClockoutTime.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
