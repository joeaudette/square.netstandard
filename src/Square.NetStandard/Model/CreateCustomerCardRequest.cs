/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Defines the fields that are included in the request body of a request to the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
    /// </summary>
    [DataContract]
    public partial class CreateCustomerCardRequest :  IEquatable<CreateCustomerCardRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCustomerCardRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateCustomerCardRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCustomerCardRequest" /> class.
        /// </summary>
        /// <param name="CardNonce">A card nonce representing the credit card to link to the customer.  Card nonces are generated by the &#x60;SqPaymentForm&#x60; that buyers enter their card information into. See [Embedding the payment form](/articles/adding-payment-form/) for more information.  __Note:__ Card nonces generated by digital wallets (e.g., Apple Pay) cannot be used to create a customer card. (required).</param>
        /// <param name="BillingAddress">Address information for the card on file. Only the &#x60;postal_code&#x60; field is required for payments in the US and Canada..</param>
        /// <param name="CardholderName">The cardholder&#39;s name..</param>
        public CreateCustomerCardRequest(string CardNonce = default(string), Address BillingAddress = default(Address), string CardholderName = default(string))
        {
            // to ensure "CardNonce" is required (not null)
            if (CardNonce == null)
            {
                throw new InvalidDataException("CardNonce is a required property for CreateCustomerCardRequest and cannot be null");
            }
            else
            {
                this.CardNonce = CardNonce;
            }
            this.BillingAddress = BillingAddress;
            this.CardholderName = CardholderName;
        }
        
        /// <summary>
        /// A card nonce representing the credit card to link to the customer.  Card nonces are generated by the &#x60;SqPaymentForm&#x60; that buyers enter their card information into. See [Embedding the payment form](/articles/adding-payment-form/) for more information.  __Note:__ Card nonces generated by digital wallets (e.g., Apple Pay) cannot be used to create a customer card.
        /// </summary>
        /// <value>A card nonce representing the credit card to link to the customer.  Card nonces are generated by the &#x60;SqPaymentForm&#x60; that buyers enter their card information into. See [Embedding the payment form](/articles/adding-payment-form/) for more information.  __Note:__ Card nonces generated by digital wallets (e.g., Apple Pay) cannot be used to create a customer card.</value>
        [DataMember(Name="card_nonce", EmitDefaultValue=false)]
        public string CardNonce { get; set; }
        /// <summary>
        /// Address information for the card on file. Only the &#x60;postal_code&#x60; field is required for payments in the US and Canada.
        /// </summary>
        /// <value>Address information for the card on file. Only the &#x60;postal_code&#x60; field is required for payments in the US and Canada.</value>
        [DataMember(Name="billing_address", EmitDefaultValue=false)]
        public Address BillingAddress { get; set; }
        /// <summary>
        /// The cardholder&#39;s name.
        /// </summary>
        /// <value>The cardholder&#39;s name.</value>
        [DataMember(Name="cardholder_name", EmitDefaultValue=false)]
        public string CardholderName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateCustomerCardRequest {\n");
            sb.Append("  CardNonce: ").Append(CardNonce).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  CardholderName: ").Append(CardholderName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateCustomerCardRequest);
        }

        /// <summary>
        /// Returns true if CreateCustomerCardRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateCustomerCardRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCustomerCardRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CardNonce == other.CardNonce ||
                    this.CardNonce != null &&
                    this.CardNonce.Equals(other.CardNonce)
                ) && 
                (
                    this.BillingAddress == other.BillingAddress ||
                    this.BillingAddress != null &&
                    this.BillingAddress.Equals(other.BillingAddress)
                ) && 
                (
                    this.CardholderName == other.CardholderName ||
                    this.CardholderName != null &&
                    this.CardholderName.Equals(other.CardholderName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CardNonce != null)
                    hash = hash * 59 + this.CardNonce.GetHashCode();
                if (this.BillingAddress != null)
                    hash = hash * 59 + this.BillingAddress.GetHashCode();
                if (this.CardholderName != null)
                    hash = hash * 59 + this.CardholderName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
