/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// V1PaymentItemDetail
    /// </summary>
    [DataContract]
    public partial class V1PaymentItemDetail :  IEquatable<V1PaymentItemDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1PaymentItemDetail" /> class.
        /// </summary>
        /// <param name="CategoryName">The name of the item&#39;s merchant-defined category, if any..</param>
        /// <param name="Sku"> The item&#39;s merchant-defined SKU, if any..</param>
        /// <param name="ItemId">The unique ID of the item purchased, if any..</param>
        /// <param name="ItemVariationId">The unique ID of the item variation purchased, if any..</param>
        public V1PaymentItemDetail(string CategoryName = default(string), string Sku = default(string), string ItemId = default(string), string ItemVariationId = default(string))
        {
            this.CategoryName = CategoryName;
            this.Sku = Sku;
            this.ItemId = ItemId;
            this.ItemVariationId = ItemVariationId;
        }
        
        /// <summary>
        /// The name of the item&#39;s merchant-defined category, if any.
        /// </summary>
        /// <value>The name of the item&#39;s merchant-defined category, if any.</value>
        [DataMember(Name="category_name", EmitDefaultValue=false)]
        public string CategoryName { get; set; }
        /// <summary>
        ///  The item&#39;s merchant-defined SKU, if any.
        /// </summary>
        /// <value> The item&#39;s merchant-defined SKU, if any.</value>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; set; }
        /// <summary>
        /// The unique ID of the item purchased, if any.
        /// </summary>
        /// <value>The unique ID of the item purchased, if any.</value>
        [DataMember(Name="item_id", EmitDefaultValue=false)]
        public string ItemId { get; set; }
        /// <summary>
        /// The unique ID of the item variation purchased, if any.
        /// </summary>
        /// <value>The unique ID of the item variation purchased, if any.</value>
        [DataMember(Name="item_variation_id", EmitDefaultValue=false)]
        public string ItemVariationId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1PaymentItemDetail {\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ItemVariationId: ").Append(ItemVariationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1PaymentItemDetail);
        }

        /// <summary>
        /// Returns true if V1PaymentItemDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of V1PaymentItemDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1PaymentItemDetail other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CategoryName == other.CategoryName ||
                    this.CategoryName != null &&
                    this.CategoryName.Equals(other.CategoryName)
                ) && 
                (
                    this.Sku == other.Sku ||
                    this.Sku != null &&
                    this.Sku.Equals(other.Sku)
                ) && 
                (
                    this.ItemId == other.ItemId ||
                    this.ItemId != null &&
                    this.ItemId.Equals(other.ItemId)
                ) && 
                (
                    this.ItemVariationId == other.ItemVariationId ||
                    this.ItemVariationId != null &&
                    this.ItemVariationId.Equals(other.ItemVariationId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CategoryName != null)
                    hash = hash * 59 + this.CategoryName.GetHashCode();
                if (this.Sku != null)
                    hash = hash * 59 + this.Sku.GetHashCode();
                if (this.ItemId != null)
                    hash = hash * 59 + this.ItemId.GetHashCode();
                if (this.ItemVariationId != null)
                    hash = hash * 59 + this.ItemVariationId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
