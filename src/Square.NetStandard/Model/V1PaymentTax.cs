/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// V1PaymentTax
    /// </summary>
    [DataContract]
    public partial class V1PaymentTax :  IEquatable<V1PaymentTax>, IValidatableObject
    {
        /// <summary>
        /// Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
        /// </summary>
        /// <value>Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InclusionTypeEnum
        {
            
            /// <summary>
            /// Enum ADDITIVE for "ADDITIVE"
            /// </summary>
            [EnumMember(Value = "ADDITIVE")]
            ADDITIVE,
            
            /// <summary>
            /// Enum INCLUSIVE for "INCLUSIVE"
            /// </summary>
            [EnumMember(Value = "INCLUSIVE")]
            INCLUSIVE
        }

        /// <summary>
        /// Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
        /// </summary>
        /// <value>Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.</value>
        [DataMember(Name="inclusion_type", EmitDefaultValue=false)]
        public InclusionTypeEnum? InclusionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1PaymentTax" /> class.
        /// </summary>
        /// <param name="Errors">Any errors that occurred during the request..</param>
        /// <param name="Name">The merchant-defined name of the tax..</param>
        /// <param name="AppliedMoney">The amount of money that this tax adds to the payment..</param>
        /// <param name="Rate">The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%..</param>
        /// <param name="InclusionType">Whether the tax is an ADDITIVE tax or an INCLUSIVE tax..</param>
        /// <param name="FeeId">The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID..</param>
        public V1PaymentTax(List<Error> Errors = default(List<Error>), string Name = default(string), V1Money AppliedMoney = default(V1Money), string Rate = default(string), InclusionTypeEnum? InclusionType = default(InclusionTypeEnum?), string FeeId = default(string))
        {
            this.Errors = Errors;
            this.Name = Name;
            this.AppliedMoney = AppliedMoney;
            this.Rate = Rate;
            this.InclusionType = InclusionType;
            this.FeeId = FeeId;
        }
        
        /// <summary>
        /// Any errors that occurred during the request.
        /// </summary>
        /// <value>Any errors that occurred during the request.</value>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public List<Error> Errors { get; set; }
        /// <summary>
        /// The merchant-defined name of the tax.
        /// </summary>
        /// <value>The merchant-defined name of the tax.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The amount of money that this tax adds to the payment.
        /// </summary>
        /// <value>The amount of money that this tax adds to the payment.</value>
        [DataMember(Name="applied_money", EmitDefaultValue=false)]
        public V1Money AppliedMoney { get; set; }
        /// <summary>
        /// The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.
        /// </summary>
        /// <value>The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.</value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public string Rate { get; set; }
        /// <summary>
        /// The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID.
        /// </summary>
        /// <value>The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID.</value>
        [DataMember(Name="fee_id", EmitDefaultValue=false)]
        public string FeeId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1PaymentTax {\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AppliedMoney: ").Append(AppliedMoney).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  InclusionType: ").Append(InclusionType).Append("\n");
            sb.Append("  FeeId: ").Append(FeeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1PaymentTax);
        }

        /// <summary>
        /// Returns true if V1PaymentTax instances are equal
        /// </summary>
        /// <param name="other">Instance of V1PaymentTax to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1PaymentTax other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Errors == other.Errors ||
                    this.Errors != null &&
                    this.Errors.SequenceEqual(other.Errors)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.AppliedMoney == other.AppliedMoney ||
                    this.AppliedMoney != null &&
                    this.AppliedMoney.Equals(other.AppliedMoney)
                ) && 
                (
                    this.Rate == other.Rate ||
                    this.Rate != null &&
                    this.Rate.Equals(other.Rate)
                ) && 
                (
                    this.InclusionType == other.InclusionType ||
                    this.InclusionType != null &&
                    this.InclusionType.Equals(other.InclusionType)
                ) && 
                (
                    this.FeeId == other.FeeId ||
                    this.FeeId != null &&
                    this.FeeId.Equals(other.FeeId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Errors != null)
                    hash = hash * 59 + this.Errors.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.AppliedMoney != null)
                    hash = hash * 59 + this.AppliedMoney.GetHashCode();
                if (this.Rate != null)
                    hash = hash * 59 + this.Rate.GetHashCode();
                if (this.InclusionType != null)
                    hash = hash * 59 + this.InclusionType.GetHashCode();
                if (this.FeeId != null)
                    hash = hash * 59 + this.FeeId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
