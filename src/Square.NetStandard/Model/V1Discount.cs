/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// V1Discount
    /// </summary>
    [DataContract]
    public partial class V1Discount :  IEquatable<V1Discount>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether the discount is a FIXED value or entered at the time of sale.
        /// </summary>
        /// <value>Indicates whether the discount is a FIXED value or entered at the time of sale.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DiscountTypeEnum
        {
            
            /// <summary>
            /// Enum FIXED for "FIXED"
            /// </summary>
            [EnumMember(Value = "FIXED")]
            FIXED,
            
            /// <summary>
            /// Enum VARIABLEPERCENTAGE for "VARIABLE_PERCENTAGE"
            /// </summary>
            [EnumMember(Value = "VARIABLE_PERCENTAGE")]
            VARIABLEPERCENTAGE,
            
            /// <summary>
            /// Enum VARIABLEAMOUNT for "VARIABLE_AMOUNT"
            /// </summary>
            [EnumMember(Value = "VARIABLE_AMOUNT")]
            VARIABLEAMOUNT
        }

        /// <summary>
        /// The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6.
        /// </summary>
        /// <value>The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ColorEnum
        {
            
            /// <summary>
            /// Enum _9da2a6 for "9da2a6"
            /// </summary>
            [EnumMember(Value = "9da2a6")]
            _9da2a6,
            
            /// <summary>
            /// Enum _4ab200 for "4ab200"
            /// </summary>
            [EnumMember(Value = "4ab200")]
            _4ab200,
            
            /// <summary>
            /// Enum _0b8000 for "0b8000"
            /// </summary>
            [EnumMember(Value = "0b8000")]
            _0b8000,
            
            /// <summary>
            /// Enum _2952cc for "2952cc"
            /// </summary>
            [EnumMember(Value = "2952cc")]
            _2952cc,
            
            /// <summary>
            /// Enum A82ee5 for "a82ee5"
            /// </summary>
            [EnumMember(Value = "a82ee5")]
            A82ee5,
            
            /// <summary>
            /// Enum E5457a for "e5457a"
            /// </summary>
            [EnumMember(Value = "e5457a")]
            E5457a,
            
            /// <summary>
            /// Enum B21212 for "b21212"
            /// </summary>
            [EnumMember(Value = "b21212")]
            B21212,
            
            /// <summary>
            /// Enum _593c00 for "593c00"
            /// </summary>
            [EnumMember(Value = "593c00")]
            _593c00,
            
            /// <summary>
            /// Enum E5BF00 for "e5BF00"
            /// </summary>
            [EnumMember(Value = "e5BF00")]
            E5BF00
        }

        /// <summary>
        /// Indicates whether the discount is a FIXED value or entered at the time of sale.
        /// </summary>
        /// <value>Indicates whether the discount is a FIXED value or entered at the time of sale.</value>
        [DataMember(Name="discount_type", EmitDefaultValue=false)]
        public DiscountTypeEnum? DiscountType { get; set; }
        /// <summary>
        /// The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6.
        /// </summary>
        /// <value>The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6.</value>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public ColorEnum? Color { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1Discount" /> class.
        /// </summary>
        /// <param name="Id">The discount&#39;s unique ID..</param>
        /// <param name="Name">The discount&#39;s name..</param>
        /// <param name="Rate">The rate of the discount, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%. This rate is 0 if discount_type is VARIABLE_PERCENTAGE..</param>
        /// <param name="AmountMoney">The amount of the discount. This amount is 0 if discount_type is VARIABLE_AMOUNT. This field is not included for rate-based discounts..</param>
        /// <param name="DiscountType">Indicates whether the discount is a FIXED value or entered at the time of sale..</param>
        /// <param name="PinRequired">Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment..</param>
        /// <param name="Color">The color of the discount&#39;s display label in Square Register, if not the default color. The default color is 9da2a6..</param>
        public V1Discount(string Id = default(string), string Name = default(string), string Rate = default(string), V1Money AmountMoney = default(V1Money), DiscountTypeEnum? DiscountType = default(DiscountTypeEnum?), bool? PinRequired = default(bool?), ColorEnum? Color = default(ColorEnum?))
        {
            this.Id = Id;
            this.Name = Name;
            this.Rate = Rate;
            this.AmountMoney = AmountMoney;
            this.DiscountType = DiscountType;
            this.PinRequired = PinRequired;
            this.Color = Color;
        }
        
        /// <summary>
        /// The discount&#39;s unique ID.
        /// </summary>
        /// <value>The discount&#39;s unique ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The discount&#39;s name.
        /// </summary>
        /// <value>The discount&#39;s name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The rate of the discount, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%. This rate is 0 if discount_type is VARIABLE_PERCENTAGE.
        /// </summary>
        /// <value>The rate of the discount, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%. This rate is 0 if discount_type is VARIABLE_PERCENTAGE.</value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public string Rate { get; set; }
        /// <summary>
        /// The amount of the discount. This amount is 0 if discount_type is VARIABLE_AMOUNT. This field is not included for rate-based discounts.
        /// </summary>
        /// <value>The amount of the discount. This amount is 0 if discount_type is VARIABLE_AMOUNT. This field is not included for rate-based discounts.</value>
        [DataMember(Name="amount_money", EmitDefaultValue=false)]
        public V1Money AmountMoney { get; set; }
        /// <summary>
        /// Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment.
        /// </summary>
        /// <value>Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment.</value>
        [DataMember(Name="pin_required", EmitDefaultValue=false)]
        public bool? PinRequired { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1Discount {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  AmountMoney: ").Append(AmountMoney).Append("\n");
            sb.Append("  DiscountType: ").Append(DiscountType).Append("\n");
            sb.Append("  PinRequired: ").Append(PinRequired).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1Discount);
        }

        /// <summary>
        /// Returns true if V1Discount instances are equal
        /// </summary>
        /// <param name="other">Instance of V1Discount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1Discount other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Rate == other.Rate ||
                    this.Rate != null &&
                    this.Rate.Equals(other.Rate)
                ) && 
                (
                    this.AmountMoney == other.AmountMoney ||
                    this.AmountMoney != null &&
                    this.AmountMoney.Equals(other.AmountMoney)
                ) && 
                (
                    this.DiscountType == other.DiscountType ||
                    this.DiscountType != null &&
                    this.DiscountType.Equals(other.DiscountType)
                ) && 
                (
                    this.PinRequired == other.PinRequired ||
                    this.PinRequired != null &&
                    this.PinRequired.Equals(other.PinRequired)
                ) && 
                (
                    this.Color == other.Color ||
                    this.Color != null &&
                    this.Color.Equals(other.Color)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Rate != null)
                    hash = hash * 59 + this.Rate.GetHashCode();
                if (this.AmountMoney != null)
                    hash = hash * 59 + this.AmountMoney.GetHashCode();
                if (this.DiscountType != null)
                    hash = hash * 59 + this.DiscountType.GetHashCode();
                if (this.PinRequired != null)
                    hash = hash * 59 + this.PinRequired.GetHashCode();
                if (this.Color != null)
                    hash = hash * 59 + this.Color.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
