/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CatalogInfoResponseLimits :  IEquatable<CatalogInfoResponseLimits>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogInfoResponseLimits" /> class.
        /// </summary>
        /// <param name="BatchUpsertMaxObjectsPerBatch">The maximum number of objects that may appear within a single batch in a &#x60;/v2/catalog/batch-upsert&#x60; request..</param>
        /// <param name="BatchUpsertMaxTotalObjects">The maximum number of objects that may appear across all batches in a &#x60;/v2/catalog/batch-upsert&#x60; request..</param>
        /// <param name="BatchRetrieveMaxObjectIds">The maximum number of object IDs that may appear in a &#x60;/v2/catalog/batch-retrieve&#x60; request..</param>
        /// <param name="SearchMaxPageLimit">The maximum number of results that may be returned in a page of a &#x60;/v2/catalog/search&#x60; response..</param>
        /// <param name="BatchDeleteMaxObjectIds">The maximum number of object IDs that may be included in a single &#x60;/v2/catalog/batch-delete&#x60; request..</param>
        /// <param name="UpdateItemTaxesMaxItemIds">The maximum number of item IDs that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request..</param>
        /// <param name="UpdateItemTaxesMaxTaxesToEnable">The maximum number of tax IDs to be enabled that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request..</param>
        /// <param name="UpdateItemTaxesMaxTaxesToDisable">The maximum number of tax IDs to be disabled that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request..</param>
        /// <param name="UpdateItemModifierListsMaxItemIds">The maximum number of item IDs that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request..</param>
        /// <param name="UpdateItemModifierListsMaxModifierListsToEnable">The maximum number of modifier list IDs to be enabled that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request..</param>
        /// <param name="UpdateItemModifierListsMaxModifierListsToDisable">The maximum number of modifier list IDs to be disabled that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request..</param>
        public CatalogInfoResponseLimits(int? BatchUpsertMaxObjectsPerBatch = default(int?), int? BatchUpsertMaxTotalObjects = default(int?), int? BatchRetrieveMaxObjectIds = default(int?), int? SearchMaxPageLimit = default(int?), int? BatchDeleteMaxObjectIds = default(int?), int? UpdateItemTaxesMaxItemIds = default(int?), int? UpdateItemTaxesMaxTaxesToEnable = default(int?), int? UpdateItemTaxesMaxTaxesToDisable = default(int?), int? UpdateItemModifierListsMaxItemIds = default(int?), int? UpdateItemModifierListsMaxModifierListsToEnable = default(int?), int? UpdateItemModifierListsMaxModifierListsToDisable = default(int?))
        {
            this.BatchUpsertMaxObjectsPerBatch = BatchUpsertMaxObjectsPerBatch;
            this.BatchUpsertMaxTotalObjects = BatchUpsertMaxTotalObjects;
            this.BatchRetrieveMaxObjectIds = BatchRetrieveMaxObjectIds;
            this.SearchMaxPageLimit = SearchMaxPageLimit;
            this.BatchDeleteMaxObjectIds = BatchDeleteMaxObjectIds;
            this.UpdateItemTaxesMaxItemIds = UpdateItemTaxesMaxItemIds;
            this.UpdateItemTaxesMaxTaxesToEnable = UpdateItemTaxesMaxTaxesToEnable;
            this.UpdateItemTaxesMaxTaxesToDisable = UpdateItemTaxesMaxTaxesToDisable;
            this.UpdateItemModifierListsMaxItemIds = UpdateItemModifierListsMaxItemIds;
            this.UpdateItemModifierListsMaxModifierListsToEnable = UpdateItemModifierListsMaxModifierListsToEnable;
            this.UpdateItemModifierListsMaxModifierListsToDisable = UpdateItemModifierListsMaxModifierListsToDisable;
        }
        
        /// <summary>
        /// The maximum number of objects that may appear within a single batch in a &#x60;/v2/catalog/batch-upsert&#x60; request.
        /// </summary>
        /// <value>The maximum number of objects that may appear within a single batch in a &#x60;/v2/catalog/batch-upsert&#x60; request.</value>
        [DataMember(Name="batch_upsert_max_objects_per_batch", EmitDefaultValue=false)]
        public int? BatchUpsertMaxObjectsPerBatch { get; set; }
        /// <summary>
        /// The maximum number of objects that may appear across all batches in a &#x60;/v2/catalog/batch-upsert&#x60; request.
        /// </summary>
        /// <value>The maximum number of objects that may appear across all batches in a &#x60;/v2/catalog/batch-upsert&#x60; request.</value>
        [DataMember(Name="batch_upsert_max_total_objects", EmitDefaultValue=false)]
        public int? BatchUpsertMaxTotalObjects { get; set; }
        /// <summary>
        /// The maximum number of object IDs that may appear in a &#x60;/v2/catalog/batch-retrieve&#x60; request.
        /// </summary>
        /// <value>The maximum number of object IDs that may appear in a &#x60;/v2/catalog/batch-retrieve&#x60; request.</value>
        [DataMember(Name="batch_retrieve_max_object_ids", EmitDefaultValue=false)]
        public int? BatchRetrieveMaxObjectIds { get; set; }
        /// <summary>
        /// The maximum number of results that may be returned in a page of a &#x60;/v2/catalog/search&#x60; response.
        /// </summary>
        /// <value>The maximum number of results that may be returned in a page of a &#x60;/v2/catalog/search&#x60; response.</value>
        [DataMember(Name="search_max_page_limit", EmitDefaultValue=false)]
        public int? SearchMaxPageLimit { get; set; }
        /// <summary>
        /// The maximum number of object IDs that may be included in a single &#x60;/v2/catalog/batch-delete&#x60; request.
        /// </summary>
        /// <value>The maximum number of object IDs that may be included in a single &#x60;/v2/catalog/batch-delete&#x60; request.</value>
        [DataMember(Name="batch_delete_max_object_ids", EmitDefaultValue=false)]
        public int? BatchDeleteMaxObjectIds { get; set; }
        /// <summary>
        /// The maximum number of item IDs that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request.
        /// </summary>
        /// <value>The maximum number of item IDs that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request.</value>
        [DataMember(Name="update_item_taxes_max_item_ids", EmitDefaultValue=false)]
        public int? UpdateItemTaxesMaxItemIds { get; set; }
        /// <summary>
        /// The maximum number of tax IDs to be enabled that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request.
        /// </summary>
        /// <value>The maximum number of tax IDs to be enabled that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request.</value>
        [DataMember(Name="update_item_taxes_max_taxes_to_enable", EmitDefaultValue=false)]
        public int? UpdateItemTaxesMaxTaxesToEnable { get; set; }
        /// <summary>
        /// The maximum number of tax IDs to be disabled that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request.
        /// </summary>
        /// <value>The maximum number of tax IDs to be disabled that may be included in a single &#x60;/v2/catalog/update-item-taxes&#x60; request.</value>
        [DataMember(Name="update_item_taxes_max_taxes_to_disable", EmitDefaultValue=false)]
        public int? UpdateItemTaxesMaxTaxesToDisable { get; set; }
        /// <summary>
        /// The maximum number of item IDs that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request.
        /// </summary>
        /// <value>The maximum number of item IDs that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request.</value>
        [DataMember(Name="update_item_modifier_lists_max_item_ids", EmitDefaultValue=false)]
        public int? UpdateItemModifierListsMaxItemIds { get; set; }
        /// <summary>
        /// The maximum number of modifier list IDs to be enabled that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request.
        /// </summary>
        /// <value>The maximum number of modifier list IDs to be enabled that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request.</value>
        [DataMember(Name="update_item_modifier_lists_max_modifier_lists_to_enable", EmitDefaultValue=false)]
        public int? UpdateItemModifierListsMaxModifierListsToEnable { get; set; }
        /// <summary>
        /// The maximum number of modifier list IDs to be disabled that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request.
        /// </summary>
        /// <value>The maximum number of modifier list IDs to be disabled that may be included in a single &#x60;/v2/catalog/update-item-modifier-lists&#x60; request.</value>
        [DataMember(Name="update_item_modifier_lists_max_modifier_lists_to_disable", EmitDefaultValue=false)]
        public int? UpdateItemModifierListsMaxModifierListsToDisable { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogInfoResponseLimits {\n");
            sb.Append("  BatchUpsertMaxObjectsPerBatch: ").Append(BatchUpsertMaxObjectsPerBatch).Append("\n");
            sb.Append("  BatchUpsertMaxTotalObjects: ").Append(BatchUpsertMaxTotalObjects).Append("\n");
            sb.Append("  BatchRetrieveMaxObjectIds: ").Append(BatchRetrieveMaxObjectIds).Append("\n");
            sb.Append("  SearchMaxPageLimit: ").Append(SearchMaxPageLimit).Append("\n");
            sb.Append("  BatchDeleteMaxObjectIds: ").Append(BatchDeleteMaxObjectIds).Append("\n");
            sb.Append("  UpdateItemTaxesMaxItemIds: ").Append(UpdateItemTaxesMaxItemIds).Append("\n");
            sb.Append("  UpdateItemTaxesMaxTaxesToEnable: ").Append(UpdateItemTaxesMaxTaxesToEnable).Append("\n");
            sb.Append("  UpdateItemTaxesMaxTaxesToDisable: ").Append(UpdateItemTaxesMaxTaxesToDisable).Append("\n");
            sb.Append("  UpdateItemModifierListsMaxItemIds: ").Append(UpdateItemModifierListsMaxItemIds).Append("\n");
            sb.Append("  UpdateItemModifierListsMaxModifierListsToEnable: ").Append(UpdateItemModifierListsMaxModifierListsToEnable).Append("\n");
            sb.Append("  UpdateItemModifierListsMaxModifierListsToDisable: ").Append(UpdateItemModifierListsMaxModifierListsToDisable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CatalogInfoResponseLimits);
        }

        /// <summary>
        /// Returns true if CatalogInfoResponseLimits instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogInfoResponseLimits to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogInfoResponseLimits other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BatchUpsertMaxObjectsPerBatch == other.BatchUpsertMaxObjectsPerBatch ||
                    this.BatchUpsertMaxObjectsPerBatch != null &&
                    this.BatchUpsertMaxObjectsPerBatch.Equals(other.BatchUpsertMaxObjectsPerBatch)
                ) && 
                (
                    this.BatchUpsertMaxTotalObjects == other.BatchUpsertMaxTotalObjects ||
                    this.BatchUpsertMaxTotalObjects != null &&
                    this.BatchUpsertMaxTotalObjects.Equals(other.BatchUpsertMaxTotalObjects)
                ) && 
                (
                    this.BatchRetrieveMaxObjectIds == other.BatchRetrieveMaxObjectIds ||
                    this.BatchRetrieveMaxObjectIds != null &&
                    this.BatchRetrieveMaxObjectIds.Equals(other.BatchRetrieveMaxObjectIds)
                ) && 
                (
                    this.SearchMaxPageLimit == other.SearchMaxPageLimit ||
                    this.SearchMaxPageLimit != null &&
                    this.SearchMaxPageLimit.Equals(other.SearchMaxPageLimit)
                ) && 
                (
                    this.BatchDeleteMaxObjectIds == other.BatchDeleteMaxObjectIds ||
                    this.BatchDeleteMaxObjectIds != null &&
                    this.BatchDeleteMaxObjectIds.Equals(other.BatchDeleteMaxObjectIds)
                ) && 
                (
                    this.UpdateItemTaxesMaxItemIds == other.UpdateItemTaxesMaxItemIds ||
                    this.UpdateItemTaxesMaxItemIds != null &&
                    this.UpdateItemTaxesMaxItemIds.Equals(other.UpdateItemTaxesMaxItemIds)
                ) && 
                (
                    this.UpdateItemTaxesMaxTaxesToEnable == other.UpdateItemTaxesMaxTaxesToEnable ||
                    this.UpdateItemTaxesMaxTaxesToEnable != null &&
                    this.UpdateItemTaxesMaxTaxesToEnable.Equals(other.UpdateItemTaxesMaxTaxesToEnable)
                ) && 
                (
                    this.UpdateItemTaxesMaxTaxesToDisable == other.UpdateItemTaxesMaxTaxesToDisable ||
                    this.UpdateItemTaxesMaxTaxesToDisable != null &&
                    this.UpdateItemTaxesMaxTaxesToDisable.Equals(other.UpdateItemTaxesMaxTaxesToDisable)
                ) && 
                (
                    this.UpdateItemModifierListsMaxItemIds == other.UpdateItemModifierListsMaxItemIds ||
                    this.UpdateItemModifierListsMaxItemIds != null &&
                    this.UpdateItemModifierListsMaxItemIds.Equals(other.UpdateItemModifierListsMaxItemIds)
                ) && 
                (
                    this.UpdateItemModifierListsMaxModifierListsToEnable == other.UpdateItemModifierListsMaxModifierListsToEnable ||
                    this.UpdateItemModifierListsMaxModifierListsToEnable != null &&
                    this.UpdateItemModifierListsMaxModifierListsToEnable.Equals(other.UpdateItemModifierListsMaxModifierListsToEnable)
                ) && 
                (
                    this.UpdateItemModifierListsMaxModifierListsToDisable == other.UpdateItemModifierListsMaxModifierListsToDisable ||
                    this.UpdateItemModifierListsMaxModifierListsToDisable != null &&
                    this.UpdateItemModifierListsMaxModifierListsToDisable.Equals(other.UpdateItemModifierListsMaxModifierListsToDisable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BatchUpsertMaxObjectsPerBatch != null)
                    hash = hash * 59 + this.BatchUpsertMaxObjectsPerBatch.GetHashCode();
                if (this.BatchUpsertMaxTotalObjects != null)
                    hash = hash * 59 + this.BatchUpsertMaxTotalObjects.GetHashCode();
                if (this.BatchRetrieveMaxObjectIds != null)
                    hash = hash * 59 + this.BatchRetrieveMaxObjectIds.GetHashCode();
                if (this.SearchMaxPageLimit != null)
                    hash = hash * 59 + this.SearchMaxPageLimit.GetHashCode();
                if (this.BatchDeleteMaxObjectIds != null)
                    hash = hash * 59 + this.BatchDeleteMaxObjectIds.GetHashCode();
                if (this.UpdateItemTaxesMaxItemIds != null)
                    hash = hash * 59 + this.UpdateItemTaxesMaxItemIds.GetHashCode();
                if (this.UpdateItemTaxesMaxTaxesToEnable != null)
                    hash = hash * 59 + this.UpdateItemTaxesMaxTaxesToEnable.GetHashCode();
                if (this.UpdateItemTaxesMaxTaxesToDisable != null)
                    hash = hash * 59 + this.UpdateItemTaxesMaxTaxesToDisable.GetHashCode();
                if (this.UpdateItemModifierListsMaxItemIds != null)
                    hash = hash * 59 + this.UpdateItemModifierListsMaxItemIds.GetHashCode();
                if (this.UpdateItemModifierListsMaxModifierListsToEnable != null)
                    hash = hash * 59 + this.UpdateItemModifierListsMaxModifierListsToEnable.GetHashCode();
                if (this.UpdateItemModifierListsMaxModifierListsToDisable != null)
                    hash = hash * 59 + this.UpdateItemModifierListsMaxModifierListsToDisable.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
