/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// V1EmployeeRole
    /// </summary>
    [DataContract]
    public partial class V1EmployeeRole :  IEquatable<V1EmployeeRole>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PermissionsEnum
        {
            
            /// <summary>
            /// Enum ACCESSSALESHISTORY for "REGISTER_ACCESS_SALES_HISTORY"
            /// </summary>
            [EnumMember(Value = "REGISTER_ACCESS_SALES_HISTORY")]
            ACCESSSALESHISTORY,
            
            /// <summary>
            /// Enum APPLYRESTRICTEDDISCOUNTS for "REGISTER_APPLY_RESTRICTED_DISCOUNTS"
            /// </summary>
            [EnumMember(Value = "REGISTER_APPLY_RESTRICTED_DISCOUNTS")]
            APPLYRESTRICTEDDISCOUNTS,
            
            /// <summary>
            /// Enum CHANGESETTINGS for "REGISTER_CHANGE_SETTINGS"
            /// </summary>
            [EnumMember(Value = "REGISTER_CHANGE_SETTINGS")]
            CHANGESETTINGS,
            
            /// <summary>
            /// Enum EDITITEM for "REGISTER_EDIT_ITEM"
            /// </summary>
            [EnumMember(Value = "REGISTER_EDIT_ITEM")]
            EDITITEM,
            
            /// <summary>
            /// Enum ISSUEREFUNDS for "REGISTER_ISSUE_REFUNDS"
            /// </summary>
            [EnumMember(Value = "REGISTER_ISSUE_REFUNDS")]
            ISSUEREFUNDS,
            
            /// <summary>
            /// Enum OPENCASHDRAWEROUTSIDESALE for "REGISTER_OPEN_CASH_DRAWER_OUTSIDE_SALE"
            /// </summary>
            [EnumMember(Value = "REGISTER_OPEN_CASH_DRAWER_OUTSIDE_SALE")]
            OPENCASHDRAWEROUTSIDESALE,
            
            /// <summary>
            /// Enum VIEWSUMMARYREPORTS for "REGISTER_VIEW_SUMMARY_REPORTS"
            /// </summary>
            [EnumMember(Value = "REGISTER_VIEW_SUMMARY_REPORTS")]
            VIEWSUMMARYREPORTS
        }

        /// <summary>
        /// The role's permissions.
        /// </summary>
        /// <value>The role's permissions.</value>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public List<PermissionsEnum> Permissions { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1EmployeeRole" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1EmployeeRole() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1EmployeeRole" /> class.
        /// </summary>
        /// <param name="Id">The role&#39;s unique ID, Can only be set by Square..</param>
        /// <param name="Name">The role&#39;s merchant-defined name. (required).</param>
        /// <param name="Permissions">The role&#39;s permissions. (required).</param>
        /// <param name="IsOwner">If true, employees with this role have all permissions, regardless of the values indicated in permissions..</param>
        /// <param name="CreatedAt">The time when the employee entity was created, in ISO 8601 format. Is set by Square when the Role is created..</param>
        /// <param name="UpdatedAt">The time when the employee entity was most recently updated, in ISO 8601 format. Is set by Square when the Role updated..</param>
        public V1EmployeeRole(string Id = default(string), string Name = default(string), List<PermissionsEnum> Permissions = default(List<PermissionsEnum>), bool? IsOwner = default(bool?), string CreatedAt = default(string), string UpdatedAt = default(string))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for V1EmployeeRole and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Permissions" is required (not null)
            if (Permissions == null)
            {
                throw new InvalidDataException("Permissions is a required property for V1EmployeeRole and cannot be null");
            }
            else
            {
                this.Permissions = Permissions;
            }
            this.Id = Id;
            this.IsOwner = IsOwner;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
        }
        
        /// <summary>
        /// The role&#39;s unique ID, Can only be set by Square.
        /// </summary>
        /// <value>The role&#39;s unique ID, Can only be set by Square.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The role&#39;s merchant-defined name.
        /// </summary>
        /// <value>The role&#39;s merchant-defined name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// If true, employees with this role have all permissions, regardless of the values indicated in permissions.
        /// </summary>
        /// <value>If true, employees with this role have all permissions, regardless of the values indicated in permissions.</value>
        [DataMember(Name="is_owner", EmitDefaultValue=false)]
        public bool? IsOwner { get; set; }
        /// <summary>
        /// The time when the employee entity was created, in ISO 8601 format. Is set by Square when the Role is created.
        /// </summary>
        /// <value>The time when the employee entity was created, in ISO 8601 format. Is set by Square when the Role is created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// The time when the employee entity was most recently updated, in ISO 8601 format. Is set by Square when the Role updated.
        /// </summary>
        /// <value>The time when the employee entity was most recently updated, in ISO 8601 format. Is set by Square when the Role updated.</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1EmployeeRole {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  IsOwner: ").Append(IsOwner).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1EmployeeRole);
        }

        /// <summary>
        /// Returns true if V1EmployeeRole instances are equal
        /// </summary>
        /// <param name="other">Instance of V1EmployeeRole to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1EmployeeRole other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Permissions == other.Permissions ||
                    this.Permissions != null &&
                    this.Permissions.SequenceEqual(other.Permissions)
                ) && 
                (
                    this.IsOwner == other.IsOwner ||
                    this.IsOwner != null &&
                    this.IsOwner.Equals(other.IsOwner)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Permissions != null)
                    hash = hash * 59 + this.Permissions.GetHashCode();
                if (this.IsOwner != null)
                    hash = hash * 59 + this.IsOwner.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
