/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// V1UpdateOrderRequest
    /// </summary>
    [DataContract]
    public partial class V1UpdateOrderRequest :  IEquatable<V1UpdateOrderRequest>, IValidatableObject
    {
        /// <summary>
        /// The action to perform on the order (COMPLETE, CANCEL, or REFUND).
        /// </summary>
        /// <value>The action to perform on the order (COMPLETE, CANCEL, or REFUND).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum COMPLETE for "COMPLETE"
            /// </summary>
            [EnumMember(Value = "COMPLETE")]
            COMPLETE,
            
            /// <summary>
            /// Enum CANCEL for "CANCEL"
            /// </summary>
            [EnumMember(Value = "CANCEL")]
            CANCEL,
            
            /// <summary>
            /// Enum REFUND for "REFUND"
            /// </summary>
            [EnumMember(Value = "REFUND")]
            REFUND
        }

        /// <summary>
        /// The action to perform on the order (COMPLETE, CANCEL, or REFUND).
        /// </summary>
        /// <value>The action to perform on the order (COMPLETE, CANCEL, or REFUND).</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1UpdateOrderRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1UpdateOrderRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1UpdateOrderRequest" /> class.
        /// </summary>
        /// <param name="Action">The action to perform on the order (COMPLETE, CANCEL, or REFUND). (required).</param>
        /// <param name="ShippedTrackingNumber">The tracking number of the shipment associated with the order. Only valid if action is COMPLETE..</param>
        /// <param name="CompletedNote">A merchant-specified note about the completion of the order. Only valid if action is COMPLETE..</param>
        /// <param name="RefundedNote">A merchant-specified note about the refunding of the order. Only valid if action is REFUND..</param>
        /// <param name="CanceledNote">A merchant-specified note about the canceling of the order. Only valid if action is CANCEL..</param>
        public V1UpdateOrderRequest(ActionEnum? Action = default(ActionEnum?), string ShippedTrackingNumber = default(string), string CompletedNote = default(string), string RefundedNote = default(string), string CanceledNote = default(string))
        {
            // to ensure "Action" is required (not null)
            if (Action == null)
            {
                throw new InvalidDataException("Action is a required property for V1UpdateOrderRequest and cannot be null");
            }
            else
            {
                this.Action = Action;
            }
            this.ShippedTrackingNumber = ShippedTrackingNumber;
            this.CompletedNote = CompletedNote;
            this.RefundedNote = RefundedNote;
            this.CanceledNote = CanceledNote;
        }
        
        /// <summary>
        /// The tracking number of the shipment associated with the order. Only valid if action is COMPLETE.
        /// </summary>
        /// <value>The tracking number of the shipment associated with the order. Only valid if action is COMPLETE.</value>
        [DataMember(Name="shipped_tracking_number", EmitDefaultValue=false)]
        public string ShippedTrackingNumber { get; set; }
        /// <summary>
        /// A merchant-specified note about the completion of the order. Only valid if action is COMPLETE.
        /// </summary>
        /// <value>A merchant-specified note about the completion of the order. Only valid if action is COMPLETE.</value>
        [DataMember(Name="completed_note", EmitDefaultValue=false)]
        public string CompletedNote { get; set; }
        /// <summary>
        /// A merchant-specified note about the refunding of the order. Only valid if action is REFUND.
        /// </summary>
        /// <value>A merchant-specified note about the refunding of the order. Only valid if action is REFUND.</value>
        [DataMember(Name="refunded_note", EmitDefaultValue=false)]
        public string RefundedNote { get; set; }
        /// <summary>
        /// A merchant-specified note about the canceling of the order. Only valid if action is CANCEL.
        /// </summary>
        /// <value>A merchant-specified note about the canceling of the order. Only valid if action is CANCEL.</value>
        [DataMember(Name="canceled_note", EmitDefaultValue=false)]
        public string CanceledNote { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1UpdateOrderRequest {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  ShippedTrackingNumber: ").Append(ShippedTrackingNumber).Append("\n");
            sb.Append("  CompletedNote: ").Append(CompletedNote).Append("\n");
            sb.Append("  RefundedNote: ").Append(RefundedNote).Append("\n");
            sb.Append("  CanceledNote: ").Append(CanceledNote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1UpdateOrderRequest);
        }

        /// <summary>
        /// Returns true if V1UpdateOrderRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of V1UpdateOrderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1UpdateOrderRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                ) && 
                (
                    this.ShippedTrackingNumber == other.ShippedTrackingNumber ||
                    this.ShippedTrackingNumber != null &&
                    this.ShippedTrackingNumber.Equals(other.ShippedTrackingNumber)
                ) && 
                (
                    this.CompletedNote == other.CompletedNote ||
                    this.CompletedNote != null &&
                    this.CompletedNote.Equals(other.CompletedNote)
                ) && 
                (
                    this.RefundedNote == other.RefundedNote ||
                    this.RefundedNote != null &&
                    this.RefundedNote.Equals(other.RefundedNote)
                ) && 
                (
                    this.CanceledNote == other.CanceledNote ||
                    this.CanceledNote != null &&
                    this.CanceledNote.Equals(other.CanceledNote)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                if (this.ShippedTrackingNumber != null)
                    hash = hash * 59 + this.ShippedTrackingNumber.GetHashCode();
                if (this.CompletedNote != null)
                    hash = hash * 59 + this.CompletedNote.GetHashCode();
                if (this.RefundedNote != null)
                    hash = hash * 59 + this.RefundedNote.GetHashCode();
                if (this.CanceledNote != null)
                    hash = hash * 59 + this.CanceledNote.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
