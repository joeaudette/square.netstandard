/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Represents a line item in an order. Each line item describes a different product to purchase, with its own quantity and price details.
    /// </summary>
    [DataContract]
    public partial class OrderLineItem :  IEquatable<OrderLineItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLineItem" /> class.
        /// </summary>
        /// <param name="Name">The name of the line item..</param>
        /// <param name="Quantity">The quantity purchased, as a string representation of a number..</param>
        /// <param name="Note">The note of the line item..</param>
        /// <param name="CatalogObjectId">The [CatalogItemVariation](#type-catalogitemvariation) id applied to this line item..</param>
        /// <param name="VariationName">The name of the variation applied to this line item..</param>
        /// <param name="Modifiers">The [CatalogModifier](#type-catalogmodifier)s applied to this line item..</param>
        /// <param name="Taxes">The taxes applied to this line item..</param>
        /// <param name="Discounts">The discounts applied to this line item..</param>
        /// <param name="BasePriceMoney">The base price for a single unit of the line item..</param>
        /// <param name="GrossSalesMoney">The gross sales amount of money calculated as (item base price + modifiers price) * quantity..</param>
        /// <param name="TotalTaxMoney">The total tax amount of money to collect for the line item..</param>
        /// <param name="TotalDiscountMoney">The total discount amount of money to collect for the line item..</param>
        /// <param name="TotalMoney">The total amount of money to collect for this line item..</param>
        public OrderLineItem(string Name = default(string), string Quantity = default(string), string Note = default(string), string CatalogObjectId = default(string), string VariationName = default(string), List<OrderLineItemModifier> Modifiers = default(List<OrderLineItemModifier>), List<OrderLineItemTax> Taxes = default(List<OrderLineItemTax>), List<OrderLineItemDiscount> Discounts = default(List<OrderLineItemDiscount>), Money BasePriceMoney = default(Money), Money GrossSalesMoney = default(Money), Money TotalTaxMoney = default(Money), Money TotalDiscountMoney = default(Money), Money TotalMoney = default(Money))
        {
            this.Name = Name;
            this.Quantity = Quantity;
            this.Note = Note;
            this.CatalogObjectId = CatalogObjectId;
            this.VariationName = VariationName;
            this.Modifiers = Modifiers;
            this.Taxes = Taxes;
            this.Discounts = Discounts;
            this.BasePriceMoney = BasePriceMoney;
            this.GrossSalesMoney = GrossSalesMoney;
            this.TotalTaxMoney = TotalTaxMoney;
            this.TotalDiscountMoney = TotalDiscountMoney;
            this.TotalMoney = TotalMoney;
        }
        
        /// <summary>
        /// The name of the line item.
        /// </summary>
        /// <value>The name of the line item.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The quantity purchased, as a string representation of a number.
        /// </summary>
        /// <value>The quantity purchased, as a string representation of a number.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public string Quantity { get; set; }
        /// <summary>
        /// The note of the line item.
        /// </summary>
        /// <value>The note of the line item.</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }
        /// <summary>
        /// The [CatalogItemVariation](#type-catalogitemvariation) id applied to this line item.
        /// </summary>
        /// <value>The [CatalogItemVariation](#type-catalogitemvariation) id applied to this line item.</value>
        [DataMember(Name="catalog_object_id", EmitDefaultValue=false)]
        public string CatalogObjectId { get; set; }
        /// <summary>
        /// The name of the variation applied to this line item.
        /// </summary>
        /// <value>The name of the variation applied to this line item.</value>
        [DataMember(Name="variation_name", EmitDefaultValue=false)]
        public string VariationName { get; set; }
        /// <summary>
        /// The [CatalogModifier](#type-catalogmodifier)s applied to this line item.
        /// </summary>
        /// <value>The [CatalogModifier](#type-catalogmodifier)s applied to this line item.</value>
        [DataMember(Name="modifiers", EmitDefaultValue=false)]
        public List<OrderLineItemModifier> Modifiers { get; set; }
        /// <summary>
        /// The taxes applied to this line item.
        /// </summary>
        /// <value>The taxes applied to this line item.</value>
        [DataMember(Name="taxes", EmitDefaultValue=false)]
        public List<OrderLineItemTax> Taxes { get; set; }
        /// <summary>
        /// The discounts applied to this line item.
        /// </summary>
        /// <value>The discounts applied to this line item.</value>
        [DataMember(Name="discounts", EmitDefaultValue=false)]
        public List<OrderLineItemDiscount> Discounts { get; set; }
        /// <summary>
        /// The base price for a single unit of the line item.
        /// </summary>
        /// <value>The base price for a single unit of the line item.</value>
        [DataMember(Name="base_price_money", EmitDefaultValue=false)]
        public Money BasePriceMoney { get; set; }
        /// <summary>
        /// The gross sales amount of money calculated as (item base price + modifiers price) * quantity.
        /// </summary>
        /// <value>The gross sales amount of money calculated as (item base price + modifiers price) * quantity.</value>
        [DataMember(Name="gross_sales_money", EmitDefaultValue=false)]
        public Money GrossSalesMoney { get; set; }
        /// <summary>
        /// The total tax amount of money to collect for the line item.
        /// </summary>
        /// <value>The total tax amount of money to collect for the line item.</value>
        [DataMember(Name="total_tax_money", EmitDefaultValue=false)]
        public Money TotalTaxMoney { get; set; }
        /// <summary>
        /// The total discount amount of money to collect for the line item.
        /// </summary>
        /// <value>The total discount amount of money to collect for the line item.</value>
        [DataMember(Name="total_discount_money", EmitDefaultValue=false)]
        public Money TotalDiscountMoney { get; set; }
        /// <summary>
        /// The total amount of money to collect for this line item.
        /// </summary>
        /// <value>The total amount of money to collect for this line item.</value>
        [DataMember(Name="total_money", EmitDefaultValue=false)]
        public Money TotalMoney { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderLineItem {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  CatalogObjectId: ").Append(CatalogObjectId).Append("\n");
            sb.Append("  VariationName: ").Append(VariationName).Append("\n");
            sb.Append("  Modifiers: ").Append(Modifiers).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  Discounts: ").Append(Discounts).Append("\n");
            sb.Append("  BasePriceMoney: ").Append(BasePriceMoney).Append("\n");
            sb.Append("  GrossSalesMoney: ").Append(GrossSalesMoney).Append("\n");
            sb.Append("  TotalTaxMoney: ").Append(TotalTaxMoney).Append("\n");
            sb.Append("  TotalDiscountMoney: ").Append(TotalDiscountMoney).Append("\n");
            sb.Append("  TotalMoney: ").Append(TotalMoney).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderLineItem);
        }

        /// <summary>
        /// Returns true if OrderLineItem instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderLineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderLineItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.Note == other.Note ||
                    this.Note != null &&
                    this.Note.Equals(other.Note)
                ) && 
                (
                    this.CatalogObjectId == other.CatalogObjectId ||
                    this.CatalogObjectId != null &&
                    this.CatalogObjectId.Equals(other.CatalogObjectId)
                ) && 
                (
                    this.VariationName == other.VariationName ||
                    this.VariationName != null &&
                    this.VariationName.Equals(other.VariationName)
                ) && 
                (
                    this.Modifiers == other.Modifiers ||
                    this.Modifiers != null &&
                    this.Modifiers.SequenceEqual(other.Modifiers)
                ) && 
                (
                    this.Taxes == other.Taxes ||
                    this.Taxes != null &&
                    this.Taxes.SequenceEqual(other.Taxes)
                ) && 
                (
                    this.Discounts == other.Discounts ||
                    this.Discounts != null &&
                    this.Discounts.SequenceEqual(other.Discounts)
                ) && 
                (
                    this.BasePriceMoney == other.BasePriceMoney ||
                    this.BasePriceMoney != null &&
                    this.BasePriceMoney.Equals(other.BasePriceMoney)
                ) && 
                (
                    this.GrossSalesMoney == other.GrossSalesMoney ||
                    this.GrossSalesMoney != null &&
                    this.GrossSalesMoney.Equals(other.GrossSalesMoney)
                ) && 
                (
                    this.TotalTaxMoney == other.TotalTaxMoney ||
                    this.TotalTaxMoney != null &&
                    this.TotalTaxMoney.Equals(other.TotalTaxMoney)
                ) && 
                (
                    this.TotalDiscountMoney == other.TotalDiscountMoney ||
                    this.TotalDiscountMoney != null &&
                    this.TotalDiscountMoney.Equals(other.TotalDiscountMoney)
                ) && 
                (
                    this.TotalMoney == other.TotalMoney ||
                    this.TotalMoney != null &&
                    this.TotalMoney.Equals(other.TotalMoney)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.Note != null)
                    hash = hash * 59 + this.Note.GetHashCode();
                if (this.CatalogObjectId != null)
                    hash = hash * 59 + this.CatalogObjectId.GetHashCode();
                if (this.VariationName != null)
                    hash = hash * 59 + this.VariationName.GetHashCode();
                if (this.Modifiers != null)
                    hash = hash * 59 + this.Modifiers.GetHashCode();
                if (this.Taxes != null)
                    hash = hash * 59 + this.Taxes.GetHashCode();
                if (this.Discounts != null)
                    hash = hash * 59 + this.Discounts.GetHashCode();
                if (this.BasePriceMoney != null)
                    hash = hash * 59 + this.BasePriceMoney.GetHashCode();
                if (this.GrossSalesMoney != null)
                    hash = hash * 59 + this.GrossSalesMoney.GetHashCode();
                if (this.TotalTaxMoney != null)
                    hash = hash * 59 + this.TotalTaxMoney.GetHashCode();
                if (this.TotalDiscountMoney != null)
                    hash = hash * 59 + this.TotalDiscountMoney.GetHashCode();
                if (this.TotalMoney != null)
                    hash = hash * 59 + this.TotalMoney.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
