/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Primitives;
using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
//using System.Web;

namespace Square.Connect.Client
{
    /// <summary>
    /// API Response
    /// </summary>
    public class ApiResponse<T>
    {
        /// <summary>
        /// Gets or sets the status code (HTTP status code)
        /// </summary>
        /// <value>The status code.</value>
        public int StatusCode { get; private set; }

        /// <summary>
        /// Gets or sets the HTTP headers
        /// </summary>
        /// <value>HTTP headers</value>
        public IDictionary<string, string> Headers { get; private set; }

        /// <summary>
        /// Gets or sets the data (parsed HTTP body)
        /// </summary>
        /// <value>The data.</value>
        public T Data { get; private set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiResponse&lt;T&gt;" /> class.
        /// </summary>
        /// <param name="statusCode">HTTP status code.</param>
        /// <param name="headers">HTTP headers.</param>
        /// <param name="data">Data (parsed HTTP body)</param>
        public ApiResponse(int statusCode, IDictionary<string, string> headers, T data)
        {
            this.StatusCode= statusCode;
            this.Headers = headers;
            this.Data = data;
        }

        /// <summary>
        /// Returns the value of BatchToken to be used on the next page call if present.
        /// </summary>
        /// <value>Batch Token when present</value>
        public string BatchToken {
            get {
                if (Headers.ContainsKey("Link"))
                {
                    Regex LinkRegex = new Regex("^<([^>]+)>;rel='next'$");
                    Match match = LinkRegex.Match(Headers["Link"]);
                    if (match.Success)
                    {
                        var nextUrl = new Uri(match.Groups[1].ToString());
                        //var parameters = HttpUtility.ParseQueryString(nextUrl.Query);
                        var parameters = QueryHelpers.ParseQuery(nextUrl.Query);
                        var found = parameters.TryGetValue("batch_token", out StringValues result);

                        //return parameters["batch_token"];
                        if (found) return result;

                    }
                }

                return null;
            }
        }

    }

}
